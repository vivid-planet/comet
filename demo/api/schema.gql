# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ImageCropArea {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

enum FocalPoint {
  SMART
  CENTER
  NORTHWEST
  NORTHEAST
  SOUTHWEST
  SOUTHEAST
}

type DamFileImage {
  id: ID!
  width: Int!
  height: Int!
  exif: JSONObject
  dominantColor: String
  cropArea: ImageCropArea!
  url(height: Int!, width: Int!): String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type DamFolder {
  id: ID!
  name: String!
  parent: DamFolder
  numberOfChildFolders: Int!
  numberOfFiles: Int!
  mpath: [ID!]!
  archived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  parents: [DamFolder!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DamFile {
  id: ID!
  folder: DamFolder
  name: String!
  size: Int!
  mimetype: String!
  contentHash: String!
  title: String
  altText: String
  archived: Boolean!
  image: DamFileImage
  createdAt: DateTime!
  updatedAt: DateTime!
  fileUrl: String!
  duplicates: [DamFile!]!
  damPath: String!
}

type AutoBuildStatus {
  hasChangesSinceLastBuild: Boolean!
  lastCheck: DateTime
  nextCheck: DateTime!
}

type Build {
  id: ID!
  status: BuildJobStatus!
  name: String
  trigger: String
  startTime: DateTime
  completionTime: DateTime
  estimatedCompletionTime: DateTime
}

enum BuildJobStatus {
  pending
  active
  succeeded
  failed
}

type Redirect implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  sourceType: RedirectSourceTypeValues!
  source: String!
  targetType: RedirectTargetTypeValues!
  targetUrl: String
  targetPageId: String
  comment: String
  active: Boolean!
  generationType: RedirectGenerationType!
  createdAt: DateTime!
  targetPage: PageTreeNode
}

interface DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

enum RedirectSourceTypeValues {
  path
}

enum RedirectTargetTypeValues {
  intern
  extern
}

enum RedirectGenerationType {
  manual
  automatic
}

type Link implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  content: JSONObject!
  createdAt: DateTime!
}

type PageTreeNodeScope {
  domain: String!
  language: String!
}

type Page implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  content: JSONObject!
  seo: JSONObject!
  createdAt: DateTime!
  pageTreeNode: PageTreeNode
}

type PageTreeNode {
  id: ID!
  parentId: String
  pos: Int!
  name: String!
  slug: String!
  visibility: PageTreeNodeVisibility!
  documentType: String!
  hideInMenu: Boolean!
  scope: PageTreeNodeScope!
  category: PageTreeNodeCategory!
  childNodes: [PageTreeNode!]!
  parentNode: PageTreeNode
  path: String!
  parentNodes: [PageTreeNode!]!
  document: PageContentUnion
}

enum PageTreeNodeVisibility {
  Published
  Unpublished
  Archived
}

enum PageTreeNodeCategory {
  MainNavigation
}

union PageContentUnion = Page | Link

type PaginatedPages {
  nodes: [Page!]!
  totalCount: Int!
  nextPage: Int
  previousPage: Int
  totalPages: Int
}

type MainMenuItem {
  id: ID!
  node: PageTreeNode!
  content: JSONObject
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MainMenu {
  items: [MainMenuItem!]!
}

type News implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  title: String!
  slug: String!
  createdAt: DateTime!
}

input PageTreeNodeScopeInput {
  domain: String!
  language: String!
}

type Query {
  page(pageId: ID!): Page
  pages(offset: Int = 0, limit: Int = 20, sort: SortInput): PaginatedPages!
  link(linkId: ID!): Link
  builds(limit: Float): [Build!]!
  autoBuildStatus: AutoBuildStatus!
  pageTreeNode(id: ID!): PageTreeNode
  pageTreeNodeByPath(scope: PageTreeNodeScopeInput!, path: String!): PageTreeNode
  pageTreeNodeList(category: PageTreeNodeCategory, scope: PageTreeNodeScopeInput!): [PageTreeNode!]!
  pageTreeNodeSlugAvailable(slug: String!, parentId: ID, scope: PageTreeNodeScopeInput!): SlugAvailability!
  redirects(query: String, type: RedirectGenerationType, active: Boolean): [Redirect!]!
  redirect(id: ID!): Redirect!
  damFilesList(folderId: ID, showArchived: Boolean, filter: FileFilterInput, sort: SortInput): [DamFile!]!
  damFile(id: ID!): DamFile!
  damFilenameAlreadyExists(folderId: String, filename: String!): Boolean!
  damFoldersList(parentId: ID, showArchived: Boolean, filter: FolderFilterInput, sort: SortInput): [DamFolder!]!
  damFolder(id: ID!): DamFolder!
  damFolderByNameAndParentId(name: String!, parentId: ID): DamFolder
  news(newsId: ID!): News
  newsBySlug(slug: String!): News
  newsList: [News!]!
  mainMenu(scope: PageTreeNodeScopeInput!): MainMenu!
  mainMenuItem(pageTreeNodeId: ID!): MainMenuItem!
}

input SortInput {
  columnName: String!
  direction: SortDirection = ASC
}

enum SortDirection {
  ASC
  DESC
}

enum SlugAvailability {
  Available
  Taken
  Reserved
}

input FileFilterInput {
  searchText: String

  """Filter by file category. Is overruled by mimetypes."""
  category: FileCategory

  """Filter by mimetype. Overrules category."""
  mimetypes: [String!]
}

enum FileCategory {
  PIXEL_IMAGE
  SVG_IMAGE
  VIDEO
  AUDIO
  OTHER
}

input FolderFilterInput {
  searchText: String
}

type Mutation {
  savePage(attachedPageTreeNodeId: ID, lastUpdatedAt: DateTime, input: PageInput!, pageId: ID!): Page!
  saveLink(attachedPageTreeNodeId: ID, lastUpdatedAt: DateTime, input: LinkInput!, linkId: ID!): Link!
  createBuild: Boolean!
  updatePageTreeNode(input: PageTreeNodeUpdateInput!, id: ID!): PageTreeNode!
  deletePageTreeNode(id: ID!): Boolean!
  updatePageTreeNodeVisibility(input: PageTreeNodeUpdateVisibilityInput!, id: ID!): PageTreeNode!
  updatePageTreeNodePosition(input: PageTreeNodeUpdatePositionInput!, id: ID!): PageTreeNode!
  updatePageTreeNodeCategory(category: PageTreeNodeCategory!, id: ID!): PageTreeNode!
  createPageTreeNode(category: PageTreeNodeCategory!, scope: PageTreeNodeScopeInput!, input: PageTreeNodeCreateInput!): PageTreeNode!
  createRedirect(input: CreateRedirectInput!): Redirect!
  updateRedirect(lastUpdatedAt: DateTime, input: UpdateRedirectInput!, id: ID!): Redirect!
  updateRedirectActiveness(input: RedirectUpdateActivenessInput!, id: ID!): Redirect!
  deleteRedirect(id: ID!): Boolean!
  updateDamFile(input: UpdateDamFileInput!, id: ID!): DamFile!
  archiveDamFile(id: ID!): DamFile!
  restoreDamFile(id: ID!): DamFile!
  deleteDamFile(id: ID!): Boolean!
  createDamFolder(input: CreateDamFolderInput!): DamFolder!
  updateDamFolder(input: UpdateDamFolderInput!, id: ID!): DamFolder!
  deleteDamFolder(id: ID!): Boolean!
  createNews(input: NewsInput!): News!
  updateNews(input: NewsInput!, newsId: ID!): News!
  deleteNews(id: ID!): Boolean!
  updateMainMenuItem(lastUpdatedAt: DateTime, input: MainMenuItemInput!, pageTreeNodeId: ID!): MainMenuItem!
}

input PageInput {
  content: JSONObject!
  seo: JSONObject!
}

input LinkInput {
  content: JSONObject!
}

input PageTreeNodeUpdateInput {
  name: String!
  slug: String!
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
}

input AttachedDocumentInput {
  type: String!
  id: String
}

input PageTreeNodeUpdateVisibilityInput {
  visibility: PageTreeNodeVisibility!
}

input PageTreeNodeUpdatePositionInput {
  parentId: String
  pos: Int!
}

input PageTreeNodeCreateInput {
  name: String!
  parentId: String
  pos: Int
  slug: String!
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
}

input CreateRedirectInput {
  sourceType: RedirectSourceTypeValues!
  source: String!
  targetType: RedirectTargetTypeValues!
  targetUrl: String
  targetPageId: String
  comment: String
  active: Boolean
  generationType: RedirectGenerationType!
}

input UpdateRedirectInput {
  sourceType: RedirectSourceTypeValues
  source: String
  targetType: RedirectTargetTypeValues
  targetUrl: String
  targetPageId: String
  comment: String
  active: Boolean
  generationType: RedirectGenerationType
}

input RedirectUpdateActivenessInput {
  active: Boolean!
}

input UpdateDamFileInput {
  name: String
  title: String
  altText: String
  image: UpdateImageFileInput
  folderId: ID
}

input UpdateImageFileInput {
  cropArea: ImageCropAreaInput
}

input ImageCropAreaInput {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

input CreateDamFolderInput {
  name: String!
  parentId: ID
}

input UpdateDamFolderInput {
  name: String
  parentId: ID
  archived: Boolean
}

input NewsInput {
  title: String!
  slug: String!
}

input MainMenuItemInput {
  content: JSONObject
}
