# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Dependency {
  rootId: String!
  rootGraphqlObjectType: String!
  rootColumnName: String!
  jsonPath: String!
  visible: Boolean!
  targetGraphqlObjectType: String!
  targetId: String!
}

type PaginatedDependencies {
  nodes: [Dependency!]!
  totalCount: Int!
}

type ImageCropArea {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

enum FocalPoint {
  SMART
  CENTER
  NORTHWEST
  NORTHEAST
  SOUTHWEST
  SOUTHEAST
}

type DamFileImage {
  id: ID!
  width: Int!
  height: Int!
  exif: JSONObject
  dominantColor: String
  cropArea: ImageCropArea!
  url(width: Int!, height: Int!): String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type DamFileLicense {
  type: LicenseType
  details: String
  author: String
  durationFrom: DateTime
  durationTo: DateTime

  """The expirationDate is the durationTo + 1 day"""
  expirationDate: DateTime
  isNotValidYet: Boolean!
  expiresWithinThirtyDays: Boolean!
  hasExpired: Boolean!
  isValid: Boolean!
}

enum LicenseType {
  ROYALTY_FREE
  RIGHTS_MANAGED
  SUBSCRIPTION
  MICRO
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BuildTemplate {
  id: ID!
  name: String!

  """
  Human readable label provided by comet-dxp.com/label annotation. Use name as fallback if not present
  """
  label: String
}

type AutoBuildStatus {
  hasChangesSinceLastBuild: Boolean!
  lastCheck: DateTime
  nextCheck: DateTime!
}

type Build {
  id: ID!
  status: JobStatus!
  name: String

  """
  Human readable label provided by comet-dxp.com/label annotation. Use name as fallback if not present
  """
  label: String
  trigger: String
  startTime: DateTime
  completionTime: DateTime
  estimatedCompletionTime: DateTime
}

enum JobStatus {
  pending
  active
  succeeded
  failed
}

type CronJob {
  id: ID!
  name: String!
  schedule: String!
  lastScheduledAt: DateTime
}

type FilenameResponse {
  name: String!
  folderId: ID
  isOccupied: Boolean!
}

type Link implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  content: LinkBlockData!
  createdAt: DateTime!
}

interface DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

"""Link root block data"""
scalar LinkBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Page implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  content: PageContentBlockData!
  seo: SeoBlockData!
  createdAt: DateTime!
  pageTreeNode: PageTreeNode
  dependencies(offset: Int! = 0, limit: Int! = 25, filter: DependencyFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

"""PageContent root block data"""
scalar PageContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Seo root block data"""
scalar SeoBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input DependencyFilter {
  targetGraphqlObjectType: String
  targetId: String
  rootColumnName: String
}

type PageTreeNodeScope {
  domain: String!
  language: String!
}

type PageTreeNode {
  id: ID!
  parentId: String
  pos: Int!
  name: String!
  slug: String!
  visibility: PageTreeNodeVisibility!
  documentType: String!
  hideInMenu: Boolean!
  updatedAt: DateTime!
  scope: PageTreeNodeScope!
  category: PageTreeNodeCategory!
  userGroup: UserGroup!
  childNodes: [PageTreeNode!]!
  numberOfDescendants: Float!
  parentNode: PageTreeNode
  path: String!
  parentNodes: [PageTreeNode!]!
  document: PageContentUnion
  dependents(offset: Int! = 0, limit: Int! = 25, filter: DependentFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

enum PageTreeNodeVisibility {
  Published
  Unpublished
  Archived
}

enum PageTreeNodeCategory {
  MainNavigation
  TopMenu
}

enum UserGroup {
  All
  Admin
  User
}

union PageContentUnion = Page | Link | PredefinedPage

input DependentFilter {
  rootGraphqlObjectType: String
  rootId: String
  rootColumnName: String
}

type PaginatedPages {
  nodes: [Page!]!
  totalCount: Int!
}

type PredefinedPage implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: String
}

type CurrentUser {
  name: String!
  email: String!
  language: String!
  role: String!
  domains: [String!]!
}

type DamScope {
  domain: String!
}

type DamFolder {
  id: ID!
  name: String!
  numberOfChildFolders: Int!
  numberOfFiles: Int!
  mpath: [ID!]!
  archived: Boolean!
  isInboxFromOtherScope: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  scope: DamScope!
  parent: DamFolder
  parents: [DamFolder!]!
}

type DamFile {
  id: ID!
  folder: DamFolder
  name: String!
  size: Int!
  mimetype: String!
  contentHash: String!
  title: String
  altText: String
  archived: Boolean!
  image: DamFileImage
  license: DamFileLicense
  createdAt: DateTime!
  updatedAt: DateTime!
  scope: DamScope!
  fileUrl: String!
  duplicates: [DamFile!]!
  damPath: String!
  dependents(offset: Int! = 0, limit: Int! = 25, filter: DependentFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

type FooterContentScope {
  domain: String!
  language: String!
}

type Footer implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  content: FooterContentBlockData!
  scope: FooterContentScope!
  createdAt: DateTime!
  dependencies(offset: Int! = 0, limit: Int! = 25, filter: DependencyFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

"""FooterContent root block data"""
scalar FooterContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MainMenuItem {
  id: ID!
  node: PageTreeNode!
  content: RichTextBlockData
  createdAt: DateTime!
  updatedAt: DateTime!
  dependencies(offset: Int! = 0, limit: Int! = 25, filter: DependencyFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

"""RichText root block data"""
scalar RichTextBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MainMenu {
  items: [MainMenuItem!]!
}

type NewsComment implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  comment: String!
  createdAt: DateTime!
}

type NewsContentScope {
  domain: String!
  language: String!
}

type News implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  scope: NewsContentScope!
  slug: String!
  title: String!
  date: DateTime!
  category: NewsCategory!
  visible: Boolean!
  image: DamImageBlockData!
  content: NewsContentBlockData!
  createdAt: DateTime!
  comments: [NewsComment!]!
  dependencies(offset: Int! = 0, limit: Int! = 25, filter: DependencyFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
  dependents(offset: Int! = 0, limit: Int! = 25, filter: DependentFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

enum NewsCategory {
  Events
  Company
  Awards
}

"""DamImage root block data"""
scalar DamImageBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""NewsContent root block data"""
scalar NewsContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type PaginatedNews {
  nodes: [News!]!
  totalCount: Int!
}

type ProductCategory implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  title: String!
  slug: String!
  createdAt: DateTime!
  products: [Product!]!
}

type ProductStatistics {
  id: ID!
  views: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductTag implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  title: String!
  createdAt: DateTime!
  products: [Product!]!
}

type ProductVariant implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  name: String!
  image: DamImageBlockData!
  createdAt: DateTime!
}

type ProductDiscounts {
  quantity: Float!
  price: Float!
}

type ProductDimensions {
  width: Float!
  height: Float!
  depth: Float!
}

type ProductPackageDimensions {
  width: Float!
  height: Float!
  depth: Float!
}

type Product implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  title: String!
  visible: Boolean!
  slug: String!
  description: String!
  type: ProductType!
  price: Float
  inStock: Boolean!
  soldCount: Float!
  image: DamImageBlockData!
  discounts: [ProductDiscounts!]!
  articleNumbers: [String!]!
  dimensions: ProductDimensions
  packageDimensions: ProductPackageDimensions
  statistics: ProductStatistics
  createdAt: DateTime!
  category: ProductCategory
  variants: [ProductVariant!]!
  tags: [ProductTag!]!
}

enum ProductType {
  Cap
  Shirt
  Tie
}

type PaginatedProducts {
  nodes: [Product!]!
  totalCount: Int!
}

type PaginatedProductCategories {
  nodes: [ProductCategory!]!
  totalCount: Int!
}

type PaginatedProductTags {
  nodes: [ProductTag!]!
  totalCount: Int!
}

type RedirectScope {
  domain: String!
}

type PaginatedPageTreeNodes {
  nodes: [PageTreeNode!]!
  totalCount: Int!
}

type Redirect implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  sourceType: RedirectSourceTypeValues!
  source: String!
  target: JSONObject!
  comment: String
  active: Boolean!
  generationType: RedirectGenerationType!
  createdAt: DateTime!
  scope: RedirectScope!
  dependencies(offset: Int! = 0, limit: Int! = 25, filter: DependencyFilter, forceRefresh: Boolean! = false): PaginatedDependencies!
}

enum RedirectSourceTypeValues {
  path
}

enum RedirectGenerationType {
  manual
  automatic
}

type PaginatedRedirects {
  nodes: [Redirect!]!
  totalCount: Int!
}

type PaginatedDamItems {
  nodes: [DamItem!]!
  totalCount: Int!
}

union DamItem = DamFile | DamFolder

type CopyFilesResponse {
  mappedFiles: [MappedFile!]!
}

type MappedFile {
  rootFile: DamFile!
  copy: DamFile!
}

type PaginatedDamFiles {
  nodes: [DamFile!]!
  totalCount: Int!
}

type PaginatedDamFolders {
  nodes: [DamFolder!]!
  totalCount: Int!
}

input PageTreeNodeScopeInput {
  domain: String!
  language: String!
}

input DamScopeInput {
  domain: String!
}

input FooterContentScopeInput {
  domain: String!
  language: String!
}

input NewsContentScopeInput {
  domain: String!
  language: String!
}

input ProductDiscountsInput {
  quantity: Float!
  price: Float!
}

input ProductDimensionsInput {
  width: Float!
  height: Float!
  depth: Float!
}

input ProductPackageDimensionsInput {
  width: Float!
  height: Float!
  depth: Float!
}

input RedirectScopeInput {
  domain: String!
}

type Query {
  currentUser: CurrentUser!
  buildTemplates: [BuildTemplate!]!
  builds(limit: Float): [Build!]!
  autoBuildStatus: AutoBuildStatus!
  link(linkId: ID!): Link
  pages(offset: Int! = 0, limit: Int! = 25, sortColumnName: String, sortDirection: SortDirection! = ASC): PaginatedPages!
  pageTreeNode(id: ID!): PageTreeNode
  pageTreeNodeByPath(path: String!, scope: PageTreeNodeScopeInput!): PageTreeNode
  pageTreeNodeList(scope: PageTreeNodeScopeInput!, category: String): [PageTreeNode!]!
  paginatedPageTreeNodes(scope: PageTreeNodeScopeInput!, category: String, sort: [PageTreeNodeSort!], offset: Int! = 0, limit: Int! = 25): PaginatedPageTreeNodes!
  pageTreeNodeSlugAvailable(scope: PageTreeNodeScopeInput!, parentId: ID, slug: String!): SlugAvailability!
  redirects(scope: RedirectScopeInput!, query: String, type: RedirectGenerationType, active: Boolean, sortColumnName: String, sortDirection: SortDirection! = ASC): [Redirect!]! @deprecated(reason: "Use paginatedRedirects instead. Will be removed in the next version.")
  paginatedRedirects(scope: RedirectScopeInput!, search: String, filter: RedirectFilter, sort: [RedirectSort!], offset: Int! = 0, limit: Int! = 25): PaginatedRedirects!
  redirect(id: ID!): Redirect!
  redirectSourceAvailable(scope: RedirectScopeInput!, source: String!): Boolean!
  damItemsList(offset: Int! = 0, limit: Int! = 25, sortColumnName: String, sortDirection: SortDirection! = ASC, scope: DamScopeInput!, folderId: ID, includeArchived: Boolean, filter: DamItemFilterInput): PaginatedDamItems!
  damItemListPosition(sortColumnName: String, sortDirection: SortDirection! = ASC, scope: DamScopeInput!, id: ID!, type: DamItemType!, folderId: ID, includeArchived: Boolean, filter: DamItemFilterInput): Int!
  damFilesList(offset: Int! = 0, limit: Int! = 25, sortColumnName: String, sortDirection: SortDirection! = ASC, scope: DamScopeInput!, folderId: ID, includeArchived: Boolean = false, filter: FileFilterInput): PaginatedDamFiles!
  damFile(id: ID!): DamFile!
  findCopiesOfFileInScope(id: ID!, scope: DamScopeInput!, imageCropArea: ImageCropAreaInput): [DamFile!]!
  damIsFilenameOccupied(filename: String!, scope: DamScopeInput!, folderId: String): Boolean!
  damAreFilenamesOccupied(filenames: [FilenameInput!]!, scope: DamScopeInput!): [FilenameResponse!]!
  damFoldersFlat(scope: DamScopeInput!): [DamFolder!]!
  damFoldersList(offset: Int! = 0, limit: Int! = 25, sortColumnName: String, sortDirection: SortDirection! = ASC, scope: DamScopeInput!, parentId: ID, includeArchived: Boolean, filter: FolderFilterInput): PaginatedDamFolders!
  damFolder(id: ID!): DamFolder!
  damFolderByNameAndParentId(scope: DamScopeInput!, name: String!, parentId: ID): DamFolder
  news(id: ID!): News!
  newsBySlug(slug: String!): News
  newsList(offset: Int! = 0, limit: Int! = 25, scope: NewsContentScopeInput!, search: String, filter: NewsFilter, sort: [NewsSort!]): PaginatedNews!
  mainMenu(scope: PageTreeNodeScopeInput!): MainMenu!
  topMenu(scope: PageTreeNodeScopeInput!): [PageTreeNode!]!
  mainMenuItem(pageTreeNodeId: ID!): MainMenuItem!
  footer(scope: FooterContentScopeInput!): Footer
  predefinedPage(id: ID!): PredefinedPage
  pageTreeNodeForPredefinedPage(type: String!, scope: PageTreeNodeScopeInput!): PageTreeNode
  cronJobs: [CronJob!]!
  product(id: ID!): Product!
  productBySlug(slug: String!): Product
  products(offset: Int! = 0, limit: Int! = 25, search: String, filter: ProductFilter, sort: [ProductSort!]): PaginatedProducts!
  productCategory(id: ID!): ProductCategory!
  productCategoryBySlug(slug: String!): ProductCategory
  productCategories(offset: Int! = 0, limit: Int! = 25, search: String, filter: ProductCategoryFilter, sort: [ProductCategorySort!]): PaginatedProductCategories!
  productTag(id: ID!): ProductTag!
  productTags(offset: Int! = 0, limit: Int! = 25, search: String, filter: ProductTagFilter, sort: [ProductTagSort!]): PaginatedProductTags!
}

enum SortDirection {
  ASC
  DESC
}

input PageTreeNodeSort {
  field: PageTreeNodeSortField!
  direction: SortDirection! = ASC
}

enum PageTreeNodeSortField {
  updatedAt
  pos
}

enum SlugAvailability {
  Available
  Taken
  Reserved
}

input RedirectFilter {
  generationType: StringFilter
  source: StringFilter
  active: BooleanFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  and: [RedirectFilter!]
  or: [RedirectFilter!]
}

input StringFilter {
  contains: String
  startsWith: String
  endsWith: String
  equal: String
  notEqual: String
}

input BooleanFilter {
  equal: Boolean
}

input DateFilter {
  equal: DateTime
  lowerThan: DateTime
  greaterThan: DateTime
  lowerThanEqual: DateTime
  greaterThanEqual: DateTime
  notEqual: DateTime
}

input RedirectSort {
  field: RedirectSortField!
  direction: SortDirection! = ASC
}

enum RedirectSortField {
  source
  createdAt
  updatedAt
}

input DamItemFilterInput {
  searchText: String
  mimetypes: [String!]
}

enum DamItemType {
  File
  Folder
}

input FileFilterInput {
  searchText: String
  mimetypes: [String!]
}

input ImageCropAreaInput {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

input FilenameInput {
  name: String!
  folderId: ID
}

input FolderFilterInput {
  searchText: String
}

input NewsFilter {
  slug: StringFilter
  title: StringFilter
  date: DateFilter
  category: NewsCategoryEnumFilter
  visible: BooleanFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  and: [NewsFilter!]
  or: [NewsFilter!]
}

input NewsCategoryEnumFilter {
  isAnyOf: [NewsCategory!]
  equal: NewsCategory
  notEqual: NewsCategory
}

input NewsSort {
  field: NewsSortField!
  direction: SortDirection! = ASC
}

enum NewsSortField {
  slug
  title
  date
  category
  visible
  createdAt
  updatedAt
}

input ProductFilter {
  title: StringFilter
  visible: BooleanFilter
  slug: StringFilter
  description: StringFilter
  type: ProductTypeEnumFilter
  price: NumberFilter
  inStock: BooleanFilter
  soldCount: NumberFilter
  category: ManyToOneFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  and: [ProductFilter!]
  or: [ProductFilter!]
}

input ProductTypeEnumFilter {
  isAnyOf: [ProductType!]
  equal: ProductType
  notEqual: ProductType
}

input NumberFilter {
  equal: Float
  lowerThan: Float
  greaterThan: Float
  lowerThanEqual: Float
  greaterThanEqual: Float
  notEqual: Float
}

input ManyToOneFilter {
  isAnyOf: [ID!]
  equal: ID
  notEqual: ID
}

input ProductSort {
  field: ProductSortField!
  direction: SortDirection! = ASC
}

enum ProductSortField {
  title
  visible
  slug
  description
  type
  price
  inStock
  soldCount
  category
  createdAt
  updatedAt
}

input ProductCategoryFilter {
  title: StringFilter
  slug: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  and: [ProductCategoryFilter!]
  or: [ProductCategoryFilter!]
}

input ProductCategorySort {
  field: ProductCategorySortField!
  direction: SortDirection! = ASC
}

enum ProductCategorySortField {
  title
  slug
  createdAt
  updatedAt
}

input ProductTagFilter {
  title: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  and: [ProductTagFilter!]
  or: [ProductTagFilter!]
}

input ProductTagSort {
  field: ProductTagSortField!
  direction: SortDirection! = ASC
}

enum ProductTagSortField {
  title
  createdAt
  updatedAt
}

type Mutation {
  currentUserSignOut: String!
  createBuilds(input: CreateBuildsInput!): Boolean!
  saveLink(linkId: ID!, input: LinkInput!, attachedPageTreeNodeId: ID!, lastUpdatedAt: DateTime): Link!
  savePage(pageId: ID!, input: PageInput!, attachedPageTreeNodeId: ID!, lastUpdatedAt: DateTime): Page!
  updatePageTreeNode(id: ID!, input: PageTreeNodeUpdateInput!): PageTreeNode!
  deletePageTreeNode(id: ID!): Boolean!
  updatePageTreeNodeVisibility(id: ID!, input: PageTreeNodeUpdateVisibilityInput!): PageTreeNode!
  updatePageTreeNodeSlug(id: ID!, slug: String!): PageTreeNode!
  movePageTreeNodesByPos(ids: [ID!]!, input: MovePageTreeNodesByPosInput!): [PageTreeNode!]!
  movePageTreeNodesByNeighbour(ids: [ID!]!, input: MovePageTreeNodesByNeighbourInput!): [PageTreeNode!]!
  updatePageTreeNodeCategory(id: ID!, category: String!): PageTreeNode!
  createPageTreeNode(input: PageTreeNodeCreateInput!, scope: PageTreeNodeScopeInput!, category: String!): PageTreeNode!
  createRedirect(scope: RedirectScopeInput!, input: RedirectInput!): Redirect!
  updateRedirect(id: ID!, input: RedirectInput!, lastUpdatedAt: DateTime): Redirect!
  updateRedirectActiveness(id: ID!, input: RedirectUpdateActivenessInput!): Redirect!
  deleteRedirect(id: ID!): Boolean!
  updateDamFile(id: ID!, input: UpdateDamFileInput!): DamFile!
  importDamFileByDownload(url: String!, scope: DamScopeInput!, input: UpdateDamFileInput!): DamFile!
  moveDamFiles(fileIds: [ID!]!, targetFolderId: ID): [DamFile!]!
  copyFilesToScope(fileIds: [ID!]!, inboxFolderId: ID!): CopyFilesResponse!
  archiveDamFile(id: ID!): DamFile!
  archiveDamFiles(ids: [ID!]!): [DamFile!]!
  restoreDamFile(id: ID!): DamFile!
  restoreDamFiles(ids: [ID!]!): [DamFile!]!
  deleteDamFile(id: ID!): Boolean!
  createDamFolder(input: CreateDamFolderInput!, scope: DamScopeInput!): DamFolder!
  updateDamFolder(id: ID!, input: UpdateDamFolderInput!): DamFolder!
  moveDamFolders(folderIds: [ID!]!, targetFolderId: ID, scope: DamScopeInput!): [DamFolder!]!
  deleteDamFolder(id: ID!): Boolean!
  createNews(scope: NewsContentScopeInput!, input: NewsInput!): News!
  updateNews(id: ID!, input: NewsUpdateInput!, lastUpdatedAt: DateTime): News!
  deleteNews(id: ID!): Boolean!
  updateNewsVisibility(id: ID!, visible: Boolean!): News!
  createNewsComment(newsId: ID!, input: NewsCommentInput!): NewsComment!
  updateNewsComment(id: ID!, input: NewsCommentInput!, lastUpdatedAt: DateTime): NewsComment!
  deleteNewsComment(id: ID!): Boolean!
  updateMainMenuItem(pageTreeNodeId: ID!, input: MainMenuItemInput!, lastUpdatedAt: DateTime): MainMenuItem!
  saveFooter(scope: FooterContentScopeInput!, input: FooterInput!, lastUpdatedAt: DateTime): Footer!
  savePredefinedPage(id: ID!, input: PredefinedPageInput!, attachedPageTreeNodeId: ID!, lastUpdatedAt: DateTime): PredefinedPage!
  createProduct(input: ProductInput!): Product!
  updateProduct(id: ID!, input: ProductUpdateInput!, lastUpdatedAt: DateTime): Product!
  deleteProduct(id: ID!): Boolean!
  updateProductVisibility(id: ID!, visible: Boolean!): Product!
  createProductCategory(input: ProductCategoryInput!): ProductCategory!
  updateProductCategory(id: ID!, input: ProductCategoryUpdateInput!, lastUpdatedAt: DateTime): ProductCategory!
  deleteProductCategory(id: ID!): Boolean!
  createProductTag(input: ProductTagInput!): ProductTag!
  updateProductTag(id: ID!, input: ProductTagUpdateInput!, lastUpdatedAt: DateTime): ProductTag!
  deleteProductTag(id: ID!): Boolean!
}

input CreateBuildsInput {
  names: [String!]!
}

input LinkInput {
  content: LinkBlockInput!
}

"""Link root block input"""
scalar LinkBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input PageInput {
  content: PageContentBlockInput!
  seo: SeoBlockInput!
}

"""PageContent root block input"""
scalar PageContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Seo root block input"""
scalar SeoBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input PageTreeNodeUpdateInput {
  name: String!
  slug: String!
  attachedDocument: AttachedDocumentInput
  hideInMenu: Boolean
  createAutomaticRedirectsOnSlugChange: Boolean = true
  userGroup: UserGroup! = All
}

input AttachedDocumentInput {
  type: String!
  id: String
}

input PageTreeNodeUpdateVisibilityInput {
  visibility: PageTreeNodeVisibility!
}

input MovePageTreeNodesByPosInput {
  parentId: String
  pos: Int!
}

input MovePageTreeNodesByNeighbourInput {
  parentId: String
  afterId: String
  beforeId: String
}

input PageTreeNodeCreateInput {
  id: ID
  name: String!
  parentId: String
  pos: Int
  slug: String!
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
  userGroup: UserGroup! = All
}

input RedirectInput {
  sourceType: RedirectSourceTypeValues!
  source: String!
  target: JSONObject!
  comment: String
  active: Boolean
  generationType: RedirectGenerationType!
}

input RedirectUpdateActivenessInput {
  active: Boolean!
}

input UpdateDamFileInput {
  name: String
  title: String
  altText: String
  image: UpdateImageFileInput
  folderId: ID
  license: LicenseInput
}

input UpdateImageFileInput {
  cropArea: ImageCropAreaInput
}

input LicenseInput {
  type: LicenseType
  details: String
  author: String
  durationFrom: DateTime
  durationTo: DateTime
}

input CreateDamFolderInput {
  name: String!
  parentId: ID
  isInboxFromOtherScope: Boolean! = false
}

input UpdateDamFolderInput {
  name: String
  parentId: ID
  archived: Boolean
}

input NewsInput {
  slug: String!
  title: String!
  date: DateTime!
  category: NewsCategory! = Awards
  image: DamImageBlockInput!
  content: NewsContentBlockInput!
}

"""DamImage root block input"""
scalar DamImageBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""NewsContent root block input"""
scalar NewsContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input NewsUpdateInput {
  slug: String
  title: String
  date: DateTime
  category: NewsCategory
  image: DamImageBlockInput
  content: NewsContentBlockInput
}

input NewsCommentInput {
  comment: String!
}

input MainMenuItemInput {
  content: RichTextBlockInput
}

"""RichText root block input"""
scalar RichTextBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input FooterInput {
  content: FooterContentBlockInput!
}

"""FooterContent root block input"""
scalar FooterContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input PredefinedPageInput {
  type: String
}

input ProductInput {
  title: String!
  slug: String!
  description: String!
  type: ProductType!
  price: Float
  inStock: Boolean! = true
  image: DamImageBlockInput!
  discounts: [ProductDiscountsInput!]! = []
  articleNumbers: [String!]! = []
  dimensions: ProductDimensionsInput
  packageDimensions: ProductPackageDimensionsInput
  statistics: ProductStatisticsInput
  variants: [ProductVariantInput!]! = []
  category: ID = null
  tags: [ID!]! = []
}

input ProductStatisticsInput {
  views: Float!
}

input ProductVariantInput {
  name: String!
  image: DamImageBlockInput!
}

input ProductUpdateInput {
  title: String
  slug: String
  description: String
  type: ProductType
  price: Float
  inStock: Boolean
  image: DamImageBlockInput
  discounts: [ProductDiscountsInput!]
  articleNumbers: [String!]
  dimensions: ProductDimensionsInput
  packageDimensions: ProductPackageDimensionsInput
  statistics: ProductStatisticsInput
  variants: [ProductVariantInput!]
  category: ID
  tags: [ID!]
}

input ProductCategoryInput {
  title: String!
  slug: String!
  products: [ID!]! = []
}

input ProductCategoryUpdateInput {
  title: String
  slug: String
  products: [ID!]
}

input ProductTagInput {
  title: String!
  products: [ID!]! = []
}

input ProductTagUpdateInput {
  title: String
  products: [ID!]
}
