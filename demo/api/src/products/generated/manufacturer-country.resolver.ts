// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { EntityManager, FindOptions, ObjectQuery, Reference } from "@mikro-orm/postgresql";
import { Args, ID, Info, Mutation, Query, Resolver, ResolveField, Parent } from "@nestjs/graphql";
import { GraphQLResolveInfo } from "graphql";
import { ManufacturerCountryInput, ManufacturerCountryUpdateInput } from "./dto/manufacturer-country.input";
import { PaginatedManufacturerCountries } from "./dto/paginated-manufacturer-countries";
import { ManufacturerCountriesArgs } from "./dto/manufacturer-countries.args";
import { ManufacturerCountry } from "../entities/manufacturer-country.entity";
import { AffectedEntity, BlocksTransformerService, RequiredPermission, RootBlockDataScalar, SortDirection, extractGraphqlFields, gqlArgsToMikroOrmQuery, validateNotModified } from "@comet/cms-api";
@Resolver(() => ManufacturerCountry)
@RequiredPermission(["manufacturerCountries"], { skipScopeCheck: true })
export class ManufacturerCountryResolver {
    constructor(private readonly entityManager: EntityManager) { }
    @Query(() => ManufacturerCountry)
    @AffectedEntity(ManufacturerCountry)
    async manufacturerCountry(
    @Args("id", { type: () => ID })
    id: string): Promise<ManufacturerCountry> {
        const manufacturerCountry = await this.entityManager.findOneOrFail(ManufacturerCountry, id);
        return manufacturerCountry;
    }
    @Query(() => PaginatedManufacturerCountries)
    async manufacturerCountries(
    @Args()
    { search, filter, offset, limit }: ManufacturerCountriesArgs): Promise<PaginatedManufacturerCountries> {
        const where = gqlArgsToMikroOrmQuery({ search, filter, }, this.entityManager.getRepository<ManufacturerCountry>(ManufacturerCountry));
        const options: FindOptions<ManufacturerCountry> = { offset, limit };
        const [entities, totalCount] = await this.entityManager.findAndCount(ManufacturerCountry, where, options);
        return new PaginatedManufacturerCountries(entities, totalCount);
    }
}
