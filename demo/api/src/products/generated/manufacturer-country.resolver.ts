// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { AffectedEntity, mikroOrmQuery, RequiredPermission } from "@comet/cms-api";
import { FindOptions } from "@mikro-orm/core";
import { InjectRepository } from "@mikro-orm/nestjs";
import { EntityManager, EntityRepository } from "@mikro-orm/postgresql";
import { Args, ID, Query, Resolver } from "@nestjs/graphql";

import { ManufacturerCountry } from "../entities/manufacturer-country.entity";
import { ManufacturerCountriesArgs } from "./dto/manufacturer-countries.args";
import { PaginatedManufacturerCountries } from "./dto/paginated-manufacturer-countries";

@Resolver(() => ManufacturerCountry)
@RequiredPermission(["manufacturerCountries"], { skipScopeCheck: true })
export class ManufacturerCountryResolver {
    constructor(
        private readonly entityManager: EntityManager,
        @InjectRepository(ManufacturerCountry) private readonly repository: EntityRepository<ManufacturerCountry>,
    ) {}

    @Query(() => ManufacturerCountry)
    @AffectedEntity(ManufacturerCountry)
    async manufacturerCountry(@Args("id", { type: () => ID }) id: string): Promise<ManufacturerCountry> {
        const manufacturerCountry = await this.repository.findOneOrFail(id);
        return manufacturerCountry;
    }

    @Query(() => PaginatedManufacturerCountries)
    async manufacturerCountries(@Args() { search, filter, offset, limit }: ManufacturerCountriesArgs): Promise<PaginatedManufacturerCountries> {
        const where = mikroOrmQuery({ search, filter }, this.repository);

        const options: FindOptions<ManufacturerCountry> = { offset, limit };

        const [entities, totalCount] = await this.repository.findAndCount(where, options);
        return new PaginatedManufacturerCountries(entities, totalCount);
    }
}
