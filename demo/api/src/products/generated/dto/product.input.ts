// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { Field, InputType, ID } from "@nestjs/graphql";
import { Transform, Type } from "class-transformer";
import { IsString, IsNotEmpty, ValidateNested, IsNumber, IsBoolean, IsDate, IsEnum, IsUUID, IsArray } from "class-validator";
import { GraphQLDate } from "graphql-scalars";
import { BlockInputInterface, DamImageBlock, IsNullable, IsSlug, PartialType, RootBlockInputScalar, isBlockInputInterface } from "@comet/cms-api";
import { ProductDimensions, ProductDiscounts, ProductPriceRange, ProductStatus } from "../../entities/product.entity";
import { ProductType } from "../../entities/product-type.enum";
import { ProductNestedProductStatisticsInput } from "./product-nested-product-statistics.input";
import { ProductNestedProductColorInput } from "./product-nested-product-color.input";
import { ProductNestedProductToTagInput } from "./product-nested-product-to-tag.input";
@InputType()
export class ProductInput {
    @IsNotEmpty()
    @IsString()
    @Field()
    title: string;
    @IsNotEmpty()
    @IsEnum(ProductStatus)
    @Field(() => ProductStatus, { defaultValue: ProductStatus.Unpublished, })
    status: ProductStatus;
    @IsNotEmpty()
    @IsString()
    @IsSlug()
    @Field()
    slug: string;
    @IsNotEmpty()
    @IsString()
    @Field()
    description: string;
    @IsNotEmpty()
    @IsEnum(ProductType)
    @Field(() => ProductType)
    type: ProductType;
    @IsEnum(ProductType, { each: true })
    @Field(() => [ProductType], { defaultValue: [], })
    additionalTypes: ProductType[];
    @IsNullable()
    @IsNumber()
    @Field({ nullable: true,
        defaultValue: null, })
    price?: number;
    @IsNullable()
    @ValidateNested()
    @Type(() => ProductPriceRange)
    @Field(() => ProductPriceRange, { nullable: true })
    priceRange?: ProductPriceRange;
    @IsNotEmpty()
    @IsBoolean()
    @Field({ defaultValue: true, })
    inStock: boolean;
    @IsNullable()
    @IsDate()
    @Field(() => GraphQLDate, { nullable: true,
        defaultValue: null, })
    availableSince?: Date;
    @IsNullable()
    @IsDate()
    @Field({ nullable: true,
        defaultValue: null, })
    lastCheckedAt?: Date;
    @IsNotEmpty()
    @Field(() => RootBlockInputScalar(DamImageBlock))
    @Transform(({ value }) => (isBlockInputInterface(value) ? value : DamImageBlock.blockInputFactory(value)), { toClassOnly: true })
    @ValidateNested()
    image: BlockInputInterface;
    @IsNotEmpty()
    @IsArray()
    @ValidateNested()
    @Type(() => ProductDiscounts)
    @Field(() => [ProductDiscounts], { defaultValue: [], })
    discounts: ProductDiscounts[];
    @IsNotEmpty()
    @IsArray()
    @Field(() => [String], { defaultValue: [], })
    @IsString({ each: true })
    articleNumbers: string[];
    @IsNullable()
    @ValidateNested()
    @Type(() => ProductDimensions)
    @Field(() => ProductDimensions, { nullable: true })
    dimensions?: ProductDimensions;
    @IsNullable()
    @Field(() => ProductNestedProductStatisticsInput, { nullable: true })
    @Type(() => ProductNestedProductStatisticsInput)
    @ValidateNested()
    statistics?: ProductNestedProductStatisticsInput;
    @Field(() => [ProductNestedProductColorInput], { defaultValue: [] })
    @IsArray()
    @Type(() => ProductNestedProductColorInput)
    colors: ProductNestedProductColorInput[];
    @IsNullable()
    @Field(() => ID, { nullable: true,
        defaultValue: null, })
    @IsUUID()
    category?: string;
    @Field(() => [ID], { defaultValue: [] })
    @IsArray()
    @IsUUID(undefined, { each: true })
    tags: string[];
    @Field(() => [ProductNestedProductToTagInput], { defaultValue: [] })
    @IsArray()
    @Type(() => ProductNestedProductToTagInput)
    tagsWithStatus: ProductNestedProductToTagInput[];
    @IsNullable()
    @Field(() => ID, { nullable: true,
        defaultValue: null, })
    @IsUUID()
    manufacturer?: string;
    @IsNullable()
    @Field(() => ID, { nullable: true,
        defaultValue: null, })
    @IsString()
    priceList?: string;
    @Field(() => [ID], { defaultValue: [] })
    @IsArray()
    @IsString({ each: true })
    datasheets: string[];
}
@InputType()
export class ProductUpdateInput extends PartialType(ProductInput) {
}
