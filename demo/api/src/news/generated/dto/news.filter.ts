// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { createEnumFilter, DateTimeFilter, IsUndefinable, OneToManyFilter, StringFilter } from "@comet/cms-api";
import { Field, InputType } from "@nestjs/graphql";
import { Type } from "class-transformer";
import { ValidateNested } from "class-validator";

import { NewsCategory, NewsStatus } from "../../entities/news.entity";

@InputType()
class NewsStatusEnumFilter extends createEnumFilter(NewsStatus) {}
@InputType()
class NewsCategoryEnumFilter extends createEnumFilter(NewsCategory) {}

@InputType()
export class NewsFilter {
    @Field(() => StringFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => StringFilter)
    slug?: StringFilter;

    @Field(() => StringFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => StringFilter)
    title?: StringFilter;

    @Field(() => NewsStatusEnumFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => NewsStatusEnumFilter)
    status?: NewsStatusEnumFilter;

    @Field(() => DateTimeFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => DateTimeFilter)
    date?: DateTimeFilter;

    @Field(() => NewsCategoryEnumFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => NewsCategoryEnumFilter)
    category?: NewsCategoryEnumFilter;

    @Field(() => OneToManyFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => OneToManyFilter)
    comments?: OneToManyFilter;

    @Field(() => DateTimeFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => DateTimeFilter)
    createdAt?: DateTimeFilter;

    @Field(() => DateTimeFilter, { nullable: true })
    @ValidateNested()
    @IsUndefinable()
    @Type(() => DateTimeFilter)
    updatedAt?: DateTimeFilter;

    @Field(() => [NewsFilter], { nullable: true })
    @Type(() => NewsFilter)
    @ValidateNested({ each: true })
    @IsUndefinable()
    and?: NewsFilter[];

    @Field(() => [NewsFilter], { nullable: true })
    @Type(() => NewsFilter)
    @ValidateNested({ each: true })
    @IsUndefinable()
    or?: NewsFilter[];
}
