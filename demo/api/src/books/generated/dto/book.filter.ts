// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { BooleanFilter, createEnumFilter, DateFilter, NumberFilter, StringFilter } from "@comet/cms-api";
import { Field, InputType } from "@nestjs/graphql";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";

import { Publisher } from "../../entities/book.entity";

@InputType()
class PublisherEnumFilter extends createEnumFilter(Publisher) {}

@InputType()
export class BookFilter {
    @Field(() => StringFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => StringFilter)
    title?: StringFilter;

    @Field(() => StringFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => StringFilter)
    description?: StringFilter;

    @Field(() => BooleanFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => BooleanFilter)
    isAvailable?: BooleanFilter;

    @Field(() => DateFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => DateFilter)
    releaseDate?: DateFilter;

    @Field(() => NumberFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => NumberFilter)
    price?: NumberFilter;

    @Field(() => PublisherEnumFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => PublisherEnumFilter)
    publisher?: PublisherEnumFilter;

    @Field(() => DateFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => DateFilter)
    createdAt?: DateFilter;

    @Field(() => DateFilter, { nullable: true })
    @ValidateNested()
    @IsOptional()
    @Type(() => DateFilter)
    updatedAt?: DateFilter;

    @Field(() => [BookFilter], { nullable: true })
    @Type(() => BookFilter)
    @ValidateNested({ each: true })
    @IsOptional()
    and?: BookFilter[];

    @Field(() => [BookFilter], { nullable: true })
    @Type(() => BookFilter)
    @ValidateNested({ each: true })
    @IsOptional()
    or?: BookFilter[];
}
