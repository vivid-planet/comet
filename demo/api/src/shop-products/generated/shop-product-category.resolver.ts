// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { extractGraphqlFields, SubjectEntity } from "@comet/cms-api";
import { FindOptions, Reference } from "@mikro-orm/core";
import { InjectRepository } from "@mikro-orm/nestjs";
import { EntityManager, EntityRepository } from "@mikro-orm/postgresql";
import { Args, ID, Info, Mutation, Parent, Query, ResolveField, Resolver } from "@nestjs/graphql";
import { GraphQLResolveInfo } from "graphql";

import { ShopProduct } from "../entities/shop-product.entity";
import { ShopProductCategory } from "../entities/shop-product-category.entitiy";
import { PaginatedShopProductCategories } from "./dto/paginated-shop-product-categories";
import { ShopProductCategoriesArgs } from "./dto/shop-product-categories.args";
import { ShopProductCategoryInput, ShopProductCategoryUpdateInput } from "./dto/shop-product-category.input";
import { ShopProductCategoriesService } from "./shop-product-categories.service";

@Resolver(() => ShopProductCategory)
export class ShopProductCategoryResolver {
    constructor(
        private readonly entityManager: EntityManager,
        private readonly shopProductCategoriesService: ShopProductCategoriesService,
        @InjectRepository(ShopProductCategory) private readonly repository: EntityRepository<ShopProductCategory>,
        @InjectRepository(ShopProduct) private readonly shopProductRepository: EntityRepository<ShopProduct>,
    ) {}

    @Query(() => ShopProductCategory)
    @SubjectEntity(ShopProductCategory)
    async shopProductCategory(@Args("id", { type: () => ID }) id: string): Promise<ShopProductCategory> {
        const shopProductCategory = await this.repository.findOneOrFail(id);
        return shopProductCategory;
    }

    @Query(() => PaginatedShopProductCategories)
    async shopProductCategories(
        @Args() { search, filter, sort, offset, limit }: ShopProductCategoriesArgs,
        @Info() info: GraphQLResolveInfo,
    ): Promise<PaginatedShopProductCategories> {
        const where = this.shopProductCategoriesService.getFindCondition({ search, filter });

        const fields = extractGraphqlFields(info, { root: "nodes" });
        const populate: string[] = [];
        if (fields.includes("products")) {
            populate.push("products");
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const options: FindOptions<ShopProductCategory, any> = { offset, limit, populate };

        if (sort) {
            options.orderBy = sort.map((sortItem) => {
                return {
                    [sortItem.field]: sortItem.direction,
                };
            });
        }

        const [entities, totalCount] = await this.repository.findAndCount(where, options);
        return new PaginatedShopProductCategories(entities, totalCount);
    }

    @Mutation(() => ShopProductCategory)
    async createShopProductCategory(
        @Args("input", { type: () => ShopProductCategoryInput }) input: ShopProductCategoryInput,
    ): Promise<ShopProductCategory> {
        const { products: productsInput, ...assignInput } = input;
        const shopProductCategory = this.repository.create({
            ...assignInput,
        });

        if (productsInput) {
            const products = await this.shopProductRepository.find({ id: productsInput });
            if (products.length != productsInput.length) throw new Error("Couldn't find all products that were passed as input");
            await shopProductCategory.products.loadItems();
            shopProductCategory.products.set(products.map((product) => Reference.create(product)));
        }

        await this.entityManager.flush();

        return shopProductCategory;
    }

    @Mutation(() => ShopProductCategory)
    @SubjectEntity(ShopProductCategory)
    async updateShopProductCategory(
        @Args("id", { type: () => ID }) id: string,
        @Args("input", { type: () => ShopProductCategoryUpdateInput }) input: ShopProductCategoryUpdateInput,
    ): Promise<ShopProductCategory> {
        const shopProductCategory = await this.repository.findOneOrFail(id);

        const { products: productsInput, ...assignInput } = input;
        shopProductCategory.assign({
            ...assignInput,
        });

        if (productsInput) {
            const products = await this.shopProductRepository.find({ id: productsInput });
            if (products.length != productsInput.length) throw new Error("Couldn't find all products that were passed as input");
            await shopProductCategory.products.loadItems();
            shopProductCategory.products.set(products.map((product) => Reference.create(product)));
        }

        await this.entityManager.flush();

        return shopProductCategory;
    }

    @Mutation(() => Boolean)
    @SubjectEntity(ShopProductCategory)
    async deleteShopProductCategory(@Args("id", { type: () => ID }) id: string): Promise<boolean> {
        const shopProductCategory = await this.repository.findOneOrFail(id);
        await this.entityManager.remove(shopProductCategory);
        await this.entityManager.flush();
        return true;
    }

    @ResolveField(() => [ShopProduct])
    async products(@Parent() shopProductCategory: ShopProductCategory): Promise<ShopProduct[]> {
        return shopProductCategory.products.loadItems();
    }
}
