// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { extractGraphqlFields, SubjectEntity } from "@comet/cms-api";
import { FindOptions, Reference } from "@mikro-orm/core";
import { InjectRepository } from "@mikro-orm/nestjs";
import { EntityManager, EntityRepository } from "@mikro-orm/postgresql";
import { Args, ID, Info, Mutation, Parent, Query, ResolveField, Resolver } from "@nestjs/graphql";
import { GraphQLResolveInfo } from "graphql";

import { ShopProduct } from "../entities/shop-product.entity";
import { ShopProductVariant } from "../entities/shop-product-variant.entity";
import { PaginatedShopProductVariants } from "./dto/paginated-shop-product-variants";
import { ShopProductVariantInput, ShopProductVariantUpdateInput } from "./dto/shop-product-variant.input";
import { ShopProductVariantsArgs } from "./dto/shop-product-variants.args";
import { ShopProductVariantsService } from "./shop-product-variants.service";

@Resolver(() => ShopProductVariant)
export class ShopProductVariantResolver {
    constructor(
        private readonly entityManager: EntityManager,
        private readonly shopProductVariantsService: ShopProductVariantsService,
        @InjectRepository(ShopProductVariant) private readonly repository: EntityRepository<ShopProductVariant>,
        @InjectRepository(ShopProduct) private readonly shopProductRepository: EntityRepository<ShopProduct>,
    ) {}

    @Query(() => ShopProductVariant)
    @SubjectEntity(ShopProductVariant)
    async shopProductVariant(@Args("id", { type: () => ID }) id: string): Promise<ShopProductVariant> {
        const shopProductVariant = await this.repository.findOneOrFail(id);
        return shopProductVariant;
    }

    @Query(() => PaginatedShopProductVariants)
    async shopProductVariants(
        @Args() { search, filter, sort, offset, limit }: ShopProductVariantsArgs,
        @Info() info: GraphQLResolveInfo,
    ): Promise<PaginatedShopProductVariants> {
        const where = this.shopProductVariantsService.getFindCondition({ search, filter });

        const fields = extractGraphqlFields(info, { root: "nodes" });
        const populate: string[] = [];
        if (fields.includes("product")) {
            populate.push("product");
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const options: FindOptions<ShopProductVariant, any> = { offset, limit, populate };

        if (sort) {
            options.orderBy = sort.map((sortItem) => {
                return {
                    [sortItem.field]: sortItem.direction,
                };
            });
        }

        const [entities, totalCount] = await this.repository.findAndCount(where, options);
        return new PaginatedShopProductVariants(entities, totalCount);
    }

    @Mutation(() => ShopProductVariant)
    async createShopProductVariant(
        @Args("input", { type: () => ShopProductVariantInput }) input: ShopProductVariantInput,
    ): Promise<ShopProductVariant> {
        const { product: productInput, ...assignInput } = input;
        const shopProductVariant = this.repository.create({
            ...assignInput,

            product: Reference.create(await this.shopProductRepository.findOneOrFail(productInput)),
        });

        await this.entityManager.flush();

        return shopProductVariant;
    }

    @Mutation(() => ShopProductVariant)
    @SubjectEntity(ShopProductVariant)
    async updateShopProductVariant(
        @Args("id", { type: () => ID }) id: string,
        @Args("input", { type: () => ShopProductVariantUpdateInput }) input: ShopProductVariantUpdateInput,
    ): Promise<ShopProductVariant> {
        const shopProductVariant = await this.repository.findOneOrFail(id);

        const { product: productInput, ...assignInput } = input;
        shopProductVariant.assign({
            ...assignInput,

            product: productInput ? Reference.create(await this.shopProductRepository.findOneOrFail(productInput)) : shopProductVariant.product,
        });

        await this.entityManager.flush();

        return shopProductVariant;
    }

    @Mutation(() => Boolean)
    @SubjectEntity(ShopProductVariant)
    async deleteShopProductVariant(@Args("id", { type: () => ID }) id: string): Promise<boolean> {
        const shopProductVariant = await this.repository.findOneOrFail(id);
        await this.entityManager.remove(shopProductVariant);
        await this.entityManager.flush();
        return true;
    }

    @ResolveField(() => ShopProduct)
    async product(@Parent() shopProductVariant: ShopProductVariant): Promise<ShopProduct> {
        return shopProductVariant.product.load();
    }
}
