// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { GQLNewsGridQuery, GQLNewsGridQueryVariables, GQLNewsGridFragment, GQLCreateNewsMutation, GQLCreateNewsMutationVariables, GQLDeleteNewsMutation, GQLDeleteNewsMutationVariables } from "./NewsGrid.generated";
import { FormattedMessage } from "react-intl";
import { useIntl } from "react-intl";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Button } from "@comet/admin";
import { CrudContextMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridDateColumn } from "@comet/admin";
import { renderStaticSelectCell } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { StackLink } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { BlockPreviewContent } from "@comet/cms-admin";
import { useContentScope } from "@comet/cms-admin";
import { IconButton } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { DamImageBlock } from "@comet/cms-admin";
import { NewsContentBlock } from "../blocks/NewsContentBlock";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
const newsFragment = gql`
        fragment NewsGrid on News {
            id
            title date category image content
        }
    `;
const newsQuery = gql`
        query NewsGrid($offset: Int!, $limit: Int!, $sort: [NewsSort!], $search: String, $filter: NewsFilter, $scope: NewsContentScopeInput!) {
    newsList(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter, scope: $scope) {
                nodes {
                    ...NewsGrid
                }
                totalCount
            }
        }
        ${newsFragment}
    `;
const deleteNewsMutation = gql`
                mutation DeleteNews($id: ID!) {
                    deleteNews(id: $id)
                }
            `;
const createNewsMutation = gql`
        mutation CreateNews($scope: NewsContentScopeInput!, $input: NewsInput!) {
            createNews(, scope: $scope, input: $input) {
                id
            }
        }
    `;
function NewsGridToolbar() {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="news.newsGrid.newEntry" defaultMessage={`New News`}/>
    </Button>
            </DataGridToolbar>);
}
export function NewsGrid() {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("NewsGrid") };
    const { scope } = useContentScope();
    const columns: GridColDef<GQLNewsGridFragment>[] = [
        { field: "title",
            headerName: intl.formatMessage({ id: "news.title", defaultMessage: "Title" }),
            flex: 1,
            minWidth: 150, },
        { ...dataGridDateColumn, field: "date",
            headerName: intl.formatMessage({ id: "news.date", defaultMessage: "Date" }),
            flex: 1,
            minWidth: 150, },
        { field: "category",
            headerName: intl.formatMessage({ id: "news.category", defaultMessage: "Category" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.category?.toString(),
            valueOptions: [{
                    value: "Events",
                    label: intl.formatMessage({ id: "news.category.events", defaultMessage: "Events" }),
                }, {
                    value: "Company",
                    label: intl.formatMessage({ id: "news.category.company", defaultMessage: "Company" }),
                }, {
                    value: "Awards",
                    label: intl.formatMessage({ id: "news.category.awards", defaultMessage: "Awards" }),
                },],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150, },
        { field: "image",
            headerName: intl.formatMessage({ id: "news.image", defaultMessage: "Image" }),
            filterable: false,
            sortable: false,
            renderCell: (params) => {
                return <BlockPreviewContent block={DamImageBlock} input={params.row.image}/>;
            },
            flex: 1,
            minWidth: 150, },
        { field: "content",
            headerName: intl.formatMessage({ id: "news.content", defaultMessage: "Content" }),
            filterable: false,
            sortable: false,
            renderCell: (params) => {
                return <BlockPreviewContent block={NewsContentBlock} input={params.row.content}/>;
            },
            flex: 1,
            minWidth: 150, },
        { field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (<>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                        <CrudContextMenu copyData={() => {
                        // Don't copy id, because we want to create a new entity with this data
                        const { id, ...filteredData } = filterByFragment(newsFragment, params.row);
                        return {
                            ...filteredData,
                            image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image)),
                            content: NewsContentBlock.state2Output(NewsContentBlock.input2State(filteredData.content))
                        };
                    }} onPaste={async ({ input }) => {
                        await client.mutate<GQLCreateNewsMutation, GQLCreateNewsMutationVariables>({
                            mutation: createNewsMutation,
                            variables: { scope, input },
                        });
                    }} onDelete={async () => {
                        await client.mutate<GQLDeleteNewsMutation, GQLDeleteNewsMutationVariables>({
                            mutation: deleteNewsMutation,
                            variables: { id: params.row.id },
                        });
                    }} refetchQueries={[newsQuery]}/>
                                    
                                </>);
            }, }
    ];
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLNewsGridQuery, GQLNewsGridQueryVariables>(newsQuery, {
        variables: {
            scope, filter: gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel)
        },
    });
    const rowCount = useBufferedRowCount(data?.newsList.totalCount);
    if (error)
        throw error;
    const rows = data?.newsList.nodes ?? [];
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: NewsGridToolbar as GridSlotsComponent["toolbar"],
        }}/>);
}
