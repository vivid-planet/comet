// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { useApolloClient, useQuery } from "@apollo/client";
import {
    Field,
    filterByFragment,
    FinalForm,
    FinalFormSubmitEvent,
    Loading,
    RadioGroupField,
    TextField,
    useFormApiRef,
    useStackSwitchApi,
} from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { BlockState, createFinalFormBlock } from "@comet/blocks-admin";
import { DamImageBlock, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { GQLNewsContentScopeInput } from "@src/graphql.generated";
import { FormApi } from "final-form";
import isEqual from "lodash.isequal";
import React from "react";
import { FormattedMessage } from "react-intl";

import { NewsContentBlock } from "../blocks/NewsContentBlock";
import { createNewsMutation, newsFormFragment, newsQuery, updateNewsMutation } from "./NewsForm.gql";
import {
    GQLCreateNewsMutation,
    GQLCreateNewsMutationVariables,
    GQLNewsFormFragment,
    GQLNewsQuery,
    GQLNewsQueryVariables,
    GQLUpdateNewsMutation,
    GQLUpdateNewsMutationVariables,
} from "./NewsForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
    content: NewsContentBlock,
};

type FormValues = GQLNewsFormFragment & {
    image: BlockState<typeof rootBlocks.image>;
    content: BlockState<typeof rootBlocks.content>;
};

interface FormProps {
    id?: string;
    scope: GQLNewsContentScopeInput;
}

export function NewsForm({ id, scope }: FormProps): React.ReactElement {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLNewsQuery, GQLNewsQueryVariables>(newsQuery, id ? { variables: { id } } : { skip: true });

    const initialValues = React.useMemo<Partial<FormValues>>(
        () =>
            data?.news
                ? {
                      ...filterByFragment<GQLNewsFormFragment>(newsFormFragment, data.news),
                      date: data.news.date ? new Date(data.news.date) : undefined,
                      image: rootBlocks.image.input2State(data.news.image),
                      content: rootBlocks.content.input2State(data.news.content),
                  }
                : {
                      image: rootBlocks.image.defaultValues(),
                      content: rootBlocks.content.defaultValues(),
                  },
        [data],
    );

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "news", id);
            return resolveHasSaveConflict(data?.news.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            image: rootBlocks.image.state2Output(formValues.image),
            content: rootBlocks.content.state2Output(formValues.content),
        };
        if (mode === "edit") {
            if (!id) throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateNewsMutation, GQLUpdateNewsMutationVariables>({
                mutation: updateNewsMutation,
                variables: { id, input: updateInput },
            });
        } else {
            const { data: mutationResponse } = await client.mutate<GQLCreateNewsMutation, GQLCreateNewsMutationVariables>({
                mutation: createNewsMutation,
                variables: { input: output, scope },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createNews.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <Loading behavior="fillPageHeight" />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <>
                    {saveConflict.dialogs}
                    <>
                        <TextField
                            required
                            variant="horizontal"
                            fullWidth
                            name="slug"
                            label={<FormattedMessage id="news.slug" defaultMessage="Slug" />}
                        />

                        <TextField
                            required
                            variant="horizontal"
                            fullWidth
                            name="title"
                            label={<FormattedMessage id="news.title" defaultMessage="Title" />}
                        />

                        <Field
                            required
                            variant="horizontal"
                            fullWidth
                            name="date"
                            component={FinalFormDatePicker}
                            label={<FormattedMessage id="news.date" defaultMessage="Date" />}
                        />
                        <RadioGroupField
                            required
                            variant="horizontal"
                            fullWidth
                            name="category"
                            label={<FormattedMessage id="news.category" defaultMessage="Category" />}
                            options={[
                                {
                                    label: <FormattedMessage id="news.category.events" defaultMessage="Events" />,
                                    value: "Events",
                                },
                                {
                                    label: <FormattedMessage id="news.category.company" defaultMessage="Company" />,
                                    value: "Company",
                                },
                                {
                                    label: <FormattedMessage id="news.category.awards" defaultMessage="Awards" />,
                                    value: "Awards",
                                },
                            ]}
                        />
                        <Field
                            name="image"
                            isEqual={isEqual}
                            label={<FormattedMessage id="news.image" defaultMessage="Image" />}
                            variant="horizontal"
                            fullWidth
                        >
                            {createFinalFormBlock(rootBlocks.image)}
                        </Field>
                        <Field
                            name="content"
                            isEqual={isEqual}
                            label={<FormattedMessage id="news.content" defaultMessage="Content" />}
                            variant="horizontal"
                            fullWidth
                        >
                            {createFinalFormBlock(rootBlocks.content)}
                        </Field>
                    </>
                </>
            )}
        </FinalForm>
    );
}
