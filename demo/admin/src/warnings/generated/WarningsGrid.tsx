// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    DataGridToolbar,
    GridColDef,
    GridFilterButton,
    MainContent,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit } from "@comet/admin-icons";
import { Button, IconButton } from "@mui/material";
import { DataGridPro, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import * as React from "react";
import { FormattedMessage, useIntl } from "react-intl";

import {
    GQLCreateWarningMutation,
    GQLCreateWarningMutationVariables,
    GQLDeleteWarningMutation,
    GQLDeleteWarningMutationVariables,
    GQLWarningsGridQuery,
    GQLWarningsGridQueryVariables,
    GQLWarningsListFragment,
} from "./WarningsGrid.generated";

const warningsFragment = gql`
    fragment WarningsList on Warning {
        id
        createdAt
        updatedAt
        type
        level
        state
    }
`;

const warningsQuery = gql`
    query WarningsGrid($offset: Int, $limit: Int, $sort: [WarningSort!], $search: String, $filter: WarningFilter) {
        warnings(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...WarningsList
            }
            totalCount
        }
    }
    ${warningsFragment}
`;

const deleteWarningMutation = gql`
    mutation DeleteWarning($id: ID!) {
        deleteWarning(id: $id)
    }
`;

const createWarningMutation = gql`
    mutation CreateWarning($input: WarningInput!) {
        createWarning(input: $input) {
            id
        }
    }
`;

function WarningsGridToolbar() {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarActions>
                <Button startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add" variant="contained" color="primary">
                    <FormattedMessage id="warning.newWarning" defaultMessage="New Warning" />
                </Button>
            </ToolbarActions>
        </DataGridToolbar>
    );
}

export function WarningsGrid(): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("WarningsGrid") };

    const columns: GridColDef<GQLWarningsListFragment>[] = [
        {
            field: "createdAt",
            headerName: intl.formatMessage({ id: "warning.createdAt", defaultMessage: "Created At" }),
            type: "dateTime",
            valueGetter: ({ value }) => value && new Date(value),
            width: 150,
        },
        {
            field: "updatedAt",
            headerName: intl.formatMessage({ id: "warning.updatedAt", defaultMessage: "Updated At" }),
            type: "dateTime",
            valueGetter: ({ value }) => value && new Date(value),
            width: 150,
        },
        { field: "type", headerName: intl.formatMessage({ id: "warning.type", defaultMessage: "Type" }), width: 150 },
        {
            field: "level",
            headerName: intl.formatMessage({ id: "warning.level", defaultMessage: "Level" }),
            type: "singleSelect",
            valueOptions: [
                { value: "critical", label: intl.formatMessage({ id: "warning.level.critical", defaultMessage: "Critical" }) },
                { value: "high", label: intl.formatMessage({ id: "warning.level.high", defaultMessage: "High" }) },
                { value: "low", label: intl.formatMessage({ id: "warning.level.low", defaultMessage: "Low" }) },
            ],
            width: 150,
        },
        {
            field: "state",
            headerName: intl.formatMessage({ id: "warning.state", defaultMessage: "State" }),
            type: "singleSelect",
            valueOptions: [
                { value: "open", label: intl.formatMessage({ id: "warning.state.open", defaultMessage: "Open" }) },
                { value: "resolved", label: intl.formatMessage({ id: "warning.state.resolved", defaultMessage: "Resolved" }) },
                { value: "ignored", label: intl.formatMessage({ id: "warning.state.ignored", defaultMessage: "Ignored" }) },
            ],
            width: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            renderCell: (params) => {
                return (
                    <>
                        <IconButton component={StackLink} pageName="edit" payload={params.row.id}>
                            <Edit color="primary" />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                const row = params.row;
                                return {
                                    type: row.type,
                                    level: row.level,
                                    state: row.state,
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateWarningMutation, GQLCreateWarningMutationVariables>({
                                    mutation: createWarningMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteWarningMutation, GQLDeleteWarningMutationVariables>({
                                    mutation: deleteWarningMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[warningsQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLWarningsGridQuery, GQLWarningsGridQueryVariables>(warningsQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.warnings.totalCount);
    if (error) throw error;
    const rows = data?.warnings.nodes ?? [];

    return (
        <MainContent fullHeight>
            <DataGridPro
                {...dataGridProps}
                disableSelectionOnClick
                rows={rows}
                rowCount={rowCount}
                columns={columns}
                loading={loading}
                components={{
                    Toolbar: WarningsGridToolbar,
                }}
            />
        </MainContent>
    );
}
