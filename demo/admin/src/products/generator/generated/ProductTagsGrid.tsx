// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { GQLProductTagsGridQuery, GQLProductTagsGridQueryVariables, GQLProductTagsGridFragment, GQLDeleteProductTagMutation, GQLDeleteProductTagMutationVariables } from "./ProductTagsGrid.generated";
import { FormattedMessage } from "react-intl";
import { useIntl } from "react-intl";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Button } from "@comet/admin";
import { CrudContextMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { StackLink } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { IconButton } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { useMemo } from "react";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
const productTagsFragment = gql`
        fragment ProductTagsGrid on ProductTag {
            id
            title
        }
    `;
const productTagsQuery = gql`
    query ProductTagsGrid($offset: Int!, $limit: Int!, $sort: [ProductTagSort!], $search: String, $filter: ProductTagFilter) {
        productTags(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes { ...ProductTagsGrid } totalCount
        }
    }
    ${productTagsFragment}
    `;
const deleteProductTagMutation = gql`
                mutation DeleteProductTag($id: ID!) {
                    deleteProductTag(id: $id)
                }
            `;
function ProductTagsGridToolbar() {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="productTag.productTagsGrid.newEntry" defaultMessage={`New Product Tag`}/>
    </Button>
            </DataGridToolbar>);
}
export function ProductTagsGrid() {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote({
            queryParamsPrefix: "productTags",
        }), ...usePersistentColumnState("ProductTagsGrid") };
    const columns: GridColDef<GQLProductTagsGridFragment>[] = useMemo(() => [
        { field: "title",
            headerName: intl.formatMessage({ id: "productTag.title", defaultMessage: "Title" }),
            flex: 1,
            minWidth: 150, },
        { field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (<>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                        <CrudContextMenu onDelete={async () => {
                        await client.mutate<GQLDeleteProductTagMutation, GQLDeleteProductTagMutationVariables>({
                            mutation: deleteProductTagMutation,
                            variables: { id: params.row.id },
                        });
                    }} refetchQueries={[productTagsQuery]}/>
                                    
                                </>);
            }, }
    ], [intl, client]);
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLProductTagsGridQuery, GQLProductTagsGridQueryVariables>(productTagsQuery, {
        variables: {
            filter: gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel, columns)
        },
    });
    const rowCount = useBufferedRowCount(data?.productTags.totalCount);
    if (error)
        throw error;
    const rows = data?.productTags.nodes ?? [];
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: ProductTagsGridToolbar as GridSlotsComponent["toolbar"],
        }}/>);
}
