// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { gql } from "@apollo/client";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { GQLProductCategoryTypesSelectQuery } from "./ProductCategoryForm.generated";
import { GQLProductCategoryTypesSelectQueryVariables } from "./ProductCategoryForm.generated";
import { AsyncAutocompleteField } from "@comet/admin";
import { productCategoryFormFragment } from "./ProductCategoryForm.gql";
import { GQLProductCategoryFormFragment } from "./ProductCategoryForm.gql.generated";
import { productCategoryQuery } from "./ProductCategoryForm.gql";
import { GQLProductCategoryQuery } from "./ProductCategoryForm.gql.generated";
import { GQLProductCategoryQueryVariables } from "./ProductCategoryForm.gql.generated";
import { createProductCategoryMutation } from "./ProductCategoryForm.gql";
import { GQLCreateProductCategoryMutation } from "./ProductCategoryForm.gql.generated";
import { GQLCreateProductCategoryMutationVariables } from "./ProductCategoryForm.gql.generated";
import { updateProductCategoryMutation } from "./ProductCategoryForm.gql";
import { GQLUpdateProductCategoryMutation } from "./ProductCategoryForm.gql.generated";
import { GQLUpdateProductCategoryMutationVariables } from "./ProductCategoryForm.gql.generated";
import isEqual from "lodash.isequal";
type FormValues = GQLProductCategoryFormFragment;
interface FormProps {
    onCreate?: (id: string) => void;
    id?: string;
}
export function ProductCategoryForm({ onCreate, id }: FormProps) {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();
    const { data, error, loading, refetch } = useQuery<GQLProductCategoryQuery, GQLProductCategoryQueryVariables>(productCategoryQuery, id ? { variables: { id } } : { skip: true });
    const initialValues = useMemo<Partial<FormValues>>(() => data?.productCategory
        ? {
            ...filterByFragment<GQLProductCategoryFormFragment>(productCategoryFormFragment, data.productCategory),
        }
        : {}, [data]);
    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "productCategory", id);
            return resolveHasSaveConflict(data?.productCategory.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });
    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts())
            throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            type: formValues.type ? formValues.type.id : null,
        };
        if (mode === "edit") {
            if (!id)
                throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateProductCategoryMutation, GQLUpdateProductCategoryMutationVariables>({
                mutation: updateProductCategoryMutation,
                variables: { id, input: updateInput },
            });
        }
        else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductCategoryMutation, GQLCreateProductCategoryMutationVariables>({
                mutation: createProductCategoryMutation,
                variables: { input: output },
            });
            const id = mutationResponse?.createProductCategory.id;
            if (id) {
                setTimeout(() => {
                    onCreate?.(id);
                    if (!event.navigatingBack) {
                        stackSwitchApi.activatePage(`edit`, id);
                    }
                });
            }
        }
    };
    if (error)
        throw error;
    if (loading) {
        return <Loading behavior="fillPageHeight"/>;
    }
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode={mode} initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{}}>
                {() => (<>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField required variant="horizontal" fullWidth name="title" label={<FormattedMessage id="productCategory.title" defaultMessage="Title"/>}/>

        <TextField required variant="horizontal" fullWidth name="slug" label={<FormattedMessage id="productCategory.slug" defaultMessage="Slug"/>}/>
        <AsyncAutocompleteField variant="horizontal" fullWidth name="type" label={<FormattedMessage id="productCategory.type" defaultMessage="Type"/>} loadOptions={async (search?: string) => {
                const { data } = await client.query<GQLProductCategoryTypesSelectQuery, GQLProductCategoryTypesSelectQueryVariables>({
                    query: gql`query ProductCategoryTypesSelect(
                            
                            
                            $search: String
                        ) {
                            productCategoryTypes(
                                
                                search: $search
                            ) {
                                nodes {
                                    id
                                    title
                                }
                            }
                        }`, variables: {
                        search,
                    }
                });
                return data.productCategoryTypes.nodes;
            }} getOptionLabel={(option) => option.title}/>
                        </>
                    </>)}
            </FinalForm>);
}
