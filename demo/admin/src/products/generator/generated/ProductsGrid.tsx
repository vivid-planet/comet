// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { GQLProductsGridQuery, GQLProductsGridQueryVariables, GQLProductsGridFutureFragment, GQLDeleteProductMutation, GQLDeleteProductMutationVariables } from "./ProductsGrid.generated";
import { FormattedMessage } from "react-intl";
import { FormattedNumber } from "react-intl";
import { useIntl } from "react-intl";
import { ReactNode } from "react";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { CrudContextMenu } from "@comet/admin";
import { CrudMoreActionsMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { ExportApi } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridCellContent } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridDateTimeColumn } from "@comet/admin";
import { dataGridDateColumn } from "@comet/admin";
import { dataGridManyToManyColumn } from "@comet/admin";
import { dataGridOneToManyColumn } from "@comet/admin";
import { renderStaticSelectCell } from "@comet/admin";
import { messages } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { Tooltip } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridExcelExport } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { useTheme } from "@mui/material";
import { CircularProgress } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridRenderCellParams } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarProps } from "@mui/x-data-grid-pro";
import { GridColumnHeaderTitle } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { GQLProductFilter } from "@src/graphql.generated";
import { ProductsGridPreviewAction } from "../../ProductsGridPreviewAction";
import { ProductTitle } from "../ProductTitle";
import { ManufacturerFilterOperators } from "../ManufacturerFilter";
import { Info as InfoIcon } from "@comet/admin-icons";
import { Excel as ExcelIcon } from "@comet/admin-icons";
import { Education as EducationIcon } from "@comet/admin-icons";
const productsFragment = gql`
        fragment ProductsGridFuture on Product {
            id
            category { title } title description price inStock type availableSince createdAt manufacturer { name } tags { title } variants { name }
        }
    `;
const productsQuery = gql`
        query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
    products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
                nodes {
                    ...ProductsGridFuture
                }
                totalCount
            }
        }
        ${productsFragment}
    `;
const deleteProductMutation = gql`
                mutation DeleteProduct($id: ID!) {
                    deleteProduct(id: $id)
                }
            `;
interface ProductsGridToolbarToolbarProps extends GridToolbarProps {
    toolbarAction: ReactNode;
    exportApi: ExportApi;
}
function ProductsGridToolbar({ toolbarAction, exportApi }: ProductsGridToolbarToolbarProps) {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
        <CrudMoreActionsMenu slotProps={{
            button: {
                responsive: true
            }
        }} overallActions={[
            {
                label: <FormattedMessage {...messages.downloadAsExcel}/>,
                icon: exportApi.loading ? <CircularProgress size={20}/> : <ExcelIcon />,
                onClick: () => exportApi.exportGrid(),
                disabled: exportApi.loading,
            }
        ]}/>
        {toolbarAction}
            </DataGridToolbar>);
}
type Props = {
    filter?: GQLProductFilter;
    toolbarAction?: ReactNode;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rowAction?: (params: GridRenderCellParams<any, GQLProductsGridFutureFragment, any>) => ReactNode;
    actionsColumnWidth?: number;
};
export function ProductsGrid({ filter, toolbarAction, rowAction, actionsColumnWidth = 52 }: Props) {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote({ initialSort: [{ field: "inStock", sort: "desc" },
                { field: "price", sort: "asc" }],
            initialFilter: {
                items: [{ field: "type", operator: "is", value: "shirt" }],
            },
            queryParamsPrefix: "products",
        }), ...usePersistentColumnState("ProductsGrid") };
    const theme = useTheme();
    const columns: GridColDef<GQLProductsGridFutureFragment>[] = [
        { field: "overview",
            headerName: intl.formatMessage({ id: "product.overview", defaultMessage: "Overview" }),
            filterable: false,
            renderCell: ({ row }) => {
                const typeLabels: Record<string, ReactNode> = {
                    Cap: <FormattedMessage id="product.overview.secondaryText.type.cap" defaultMessage="great Cap"/>,
                    Shirt: <FormattedMessage id="product.overview.secondaryText.type.shirt" defaultMessage="Shirt"/>,
                    Tie: <FormattedMessage id="product.overview.secondaryText.type.tie" defaultMessage="Tie"/>,
                };
                const inStockLabels: Record<string, ReactNode> = {
                    true: <FormattedMessage id="product.overview.secondaryText.inStock" defaultMessage="In stock"/>,
                    false: <FormattedMessage id="product.overview.secondaryText.outOfStock" defaultMessage="Out of stock"/>,
                };
                return (<GridCellContent primaryText={row.title ?? "-"} secondaryText={<FormattedMessage id="product.overview.secondaryText" defaultMessage="{price} • {type} • {category} • {inStock}" values={{
                            price: typeof row.price === "undefined" || row.price === null ? (<FormattedMessage id="product.overview.secondaryText.price.empty" defaultMessage="No price"/>) : (<FormattedNumber value={row.price} minimumFractionDigits={2} maximumFractionDigits={2} style="currency" currency="EUR"/>),
                            type: row.type == null ? (<FormattedMessage id="product.overview.secondaryText.type.empty" defaultMessage="No type"/>) : ((typeLabels[`${row.type}`] ?? row.type)),
                            category: row.category?.title ?? (<FormattedMessage id="product.overview.secondaryText.category.empty" defaultMessage="No category"/>),
                            inStock: row.inStock == null ? "-" : (inStockLabels[`${row.inStock}`] ?? row.inStock),
                        }}/>}/>);
            },
            flex: 1,
            visible: theme.breakpoints.down('md'),
            disableExport: true,
            sortBy: ["title", "price", "type", "category", "inStock"],
            minWidth: 200, },
        { field: "title",
            headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Title" }),
            renderCell: ({ value, row }) => <ProductTitle title={value}/>,
            flex: 1,
            visible: theme.breakpoints.down('md'),
            minWidth: 200, },
        { field: "description",
            headerName: intl.formatMessage({ id: "product.description", defaultMessage: "Description" }),
            flex: 1,
            minWidth: 150, },
        { field: "price",
            renderHeader: () => (<>
                                        <GridColumnHeaderTitle label={intl.formatMessage({ id: "product.price", defaultMessage: "Price" })} columnWidth={150}/>
                                        <Tooltip title={<FormattedMessage id="product.price.tooltip" defaultMessage="Price in EUR"/>}>
                                            <InfoIcon sx={{ marginLeft: 1 }}/>
                                        </Tooltip>
                                    </>),
            headerName: intl.formatMessage({ id: "product.price", defaultMessage: "Price" }),
            type: "number",
            renderCell: ({ value }) => {
                return (typeof value === "number") ? <FormattedNumber value={value} style="currency" currency="EUR" minimumFractionDigits={2} maximumFractionDigits={2}/> : "";
            },
            flex: 1,
            visible: theme.breakpoints.up('md'),
            minWidth: 150,
            maxWidth: 150, },
        { field: "inStock",
            headerName: intl.formatMessage({ id: "product.inStock", defaultMessage: "In stock" }),
            type: "boolean",
            flex: 1,
            visible: theme.breakpoints.up('md'),
            minWidth: 80, },
        { field: "type",
            headerName: intl.formatMessage({ id: "product.type", defaultMessage: "Type" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.type?.toString(),
            valueOptions: [{
                    value: "Cap",
                    label: intl.formatMessage({ id: "product.type.cap.primary", defaultMessage: "Great cap" }),
                    cellContent: <GridCellContent primaryText={<FormattedMessage id="product.type.cap.primary" defaultMessage="Great cap"/>} icon={<EducationIcon color="primary"/>}/>,
                }, {
                    value: "Shirt",
                    label: intl.formatMessage({ id: "product.type.shirt", defaultMessage: "Shirt" }),
                }, {
                    value: "Tie",
                    label: intl.formatMessage({ id: "product.type.tie", defaultMessage: "Tie" }),
                },],
            renderCell: renderStaticSelectCell,
            flex: 1,
            visible: theme.breakpoints.up('md'),
            minWidth: 150,
            maxWidth: 150, },
        { ...dataGridDateColumn, field: "availableSince",
            headerName: intl.formatMessage({ id: "product.availableSince", defaultMessage: "Available Since" }),
            width: 140, },
        { ...dataGridDateTimeColumn, field: "createdAt",
            headerName: intl.formatMessage({ id: "product.createdAt", defaultMessage: "Created At" }),
            width: 170, },
        { field: "manufacturer",
            headerName: intl.formatMessage({ id: "product.manufacturer.name", defaultMessage: "Manufacturer" }),
            sortable: false,
            valueGetter: (params, row) => row.manufacturer?.name,
            filterOperators: ManufacturerFilterOperators,
            flex: 1,
            minWidth: 150, },
        { ...dataGridManyToManyColumn, field: "tags",
            headerName: intl.formatMessage({ id: "product.tags", defaultMessage: "Tags" }),
            sortable: false,
            renderCell: ({ row }) => <>{row.tags.map((tag) => tag.title).join(", ")}</>,
            flex: 1,
            disableExport: true,
            minWidth: 150, },
        { ...dataGridOneToManyColumn, field: "variants",
            headerName: intl.formatMessage({ id: "product.variants", defaultMessage: "Variants" }),
            sortable: false,
            renderCell: ({ row }) => <>{row.variants.map((variant) => variant.name).join(", ")}</>,
            flex: 1,
            disableExport: true,
            minWidth: 150, },
        { field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: actionsColumnWidth,
            disableExport: true,
            renderCell: (params) => {
                return (<>
                                <ProductsGridPreviewAction {...params}/>{rowAction && rowAction(params)}
                                        <CrudContextMenu onDelete={async () => {
                        await client.mutate<GQLDeleteProductMutation, GQLDeleteProductMutationVariables>({
                            mutation: deleteProductMutation,
                            variables: { id: params.row.id },
                        });
                    }} refetchQueries={[productsQuery]}/>
                                    
                                </>);
            }, }
    ];
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: filter ? { and: [gqlFilter, filter] } : gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel, columns)
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error)
        throw error;
    const rows = data?.products.nodes ?? [];
    const exportApi = useDataGridExcelExport<GQLProductsGridQuery["products"]["nodes"][0], GQLProductsGridQuery, Omit<GQLProductsGridQueryVariables, "offset" | "limit">>({
        columns,
        variables: {
            ...muiGridFilterToGql(columns, dataGridProps.filterModel)
        },
        query: productsQuery,
        resolveQueryNodes: (data) => data.products.nodes,
        totalCount: data?.products.totalCount ?? 0,
        exportOptions: {
            fileName: "Products",
        },
    });
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
        }} slotProps={{
            toolbar: { toolbarAction, exportApi, } as ProductsGridToolbarToolbarProps
        }}/>);
}
