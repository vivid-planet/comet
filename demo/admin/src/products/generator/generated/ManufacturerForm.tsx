// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { manufacturerFormFragment } from "./ManufacturerForm.gql";
import { GQLManufacturerFormFragment } from "./ManufacturerForm.gql.generated";
import { manufacturerQuery } from "./ManufacturerForm.gql";
import { GQLManufacturerQuery } from "./ManufacturerForm.gql.generated";
import { GQLManufacturerQueryVariables } from "./ManufacturerForm.gql.generated";
import { createManufacturerMutation } from "./ManufacturerForm.gql";
import { GQLCreateManufacturerMutation } from "./ManufacturerForm.gql.generated";
import { GQLCreateManufacturerMutationVariables } from "./ManufacturerForm.gql.generated";
import { updateManufacturerMutation } from "./ManufacturerForm.gql";
import { GQLUpdateManufacturerMutation } from "./ManufacturerForm.gql.generated";
import { GQLUpdateManufacturerMutationVariables } from "./ManufacturerForm.gql.generated";
import isEqual from "lodash.isequal";
type FormValues = GQLManufacturerFormFragment;
interface FormProps {
    onCreate?: (id: string) => void;
    id?: string;
}
export function ManufacturerForm({ onCreate, id }: FormProps) {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();
    const { data, error, loading, refetch } = useQuery<GQLManufacturerQuery, GQLManufacturerQueryVariables>(manufacturerQuery, id ? { variables: { id } } : { skip: true });
    const initialValues = useMemo<Partial<FormValues>>(() => data?.manufacturer
        ? {
            ...filterByFragment<GQLManufacturerFormFragment>(manufacturerFormFragment, data.manufacturer),
        }
        : {}, [data]);
    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "manufacturer", id);
            return resolveHasSaveConflict(data?.manufacturer.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });
    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts())
            throw new Error("Conflicts detected");
        const output = {
            ...formValues,
        };
        if (mode === "edit") {
            if (!id)
                throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateManufacturerMutation, GQLUpdateManufacturerMutationVariables>({
                mutation: updateManufacturerMutation,
                variables: { id, input: updateInput },
            });
        }
        else {
            const { data: mutationResponse } = await client.mutate<GQLCreateManufacturerMutation, GQLCreateManufacturerMutationVariables>({
                mutation: createManufacturerMutation,
                variables: {
                    input: output
                },
            });
            const id = mutationResponse?.createManufacturer.id;
            if (id) {
                setTimeout(() => {
                    onCreate?.(id);
                    if (!event.navigatingBack) {
                        stackSwitchApi.activatePage(`edit`, id);
                    }
                });
            }
        }
    };
    if (error)
        throw error;
    if (loading) {
        return <Loading behavior="fillPageHeight"/>;
    }
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode={mode} initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{}}>
                {() => (<>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField required variant="horizontal" fullWidth name="name" label={<FormattedMessage id="manufacturer.name" defaultMessage="Name"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.country" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.country" defaultMessage="Address As Embeddable Country"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.street" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.street" defaultMessage="Address As Embeddable Street"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.streetNumber" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.streetNumber" defaultMessage="Address As Embeddable Street Number"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.zip" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.zip" defaultMessage="Address As Embeddable Zip"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.alternativeAddress.country" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.alternativeAddress.country" defaultMessage="Address As Embeddable Alternative Address Country"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.alternativeAddress.street" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.alternativeAddress.street" defaultMessage="Address As Embeddable Alternative Address Street"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.alternativeAddress.streetNumber" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.alternativeAddress.streetNumber" defaultMessage="Address As Embeddable Alternative Address Street Number"/>}/>

        <TextField required variant="horizontal" fullWidth name="addressAsEmbeddable.alternativeAddress.zip" label={<FormattedMessage id="manufacturer.addressAsEmbeddable.alternativeAddress.zip" defaultMessage="Address As Embeddable Alternative Address Zip"/>}/>
                        </>
                    </>)}
            </FinalForm>);
}
