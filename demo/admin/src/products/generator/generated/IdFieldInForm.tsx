// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Field } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { Lock } from "@comet/admin-icons";
import { BlockState } from "@comet/cms-admin";
import { createFinalFormBlock } from "@comet/cms-admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { InputAdornment } from "@mui/material";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { GQLProductType } from "@src/graphql.generated";
import { DamImageBlock } from "@comet/cms-admin";
import { productFormFragment } from "./IdFieldInForm.gql";
import { GQLIdFieldInFormFragment } from "./IdFieldInForm.gql.generated";
import { productQuery } from "./IdFieldInForm.gql";
import { GQLProductQuery } from "./IdFieldInForm.gql.generated";
import { GQLProductQueryVariables } from "./IdFieldInForm.gql.generated";
import { createProductMutation } from "./IdFieldInForm.gql";
import { GQLCreateProductMutation } from "./IdFieldInForm.gql.generated";
import { GQLCreateProductMutationVariables } from "./IdFieldInForm.gql.generated";
import { updateProductMutation } from "./IdFieldInForm.gql";
import { GQLUpdateProductMutation } from "./IdFieldInForm.gql.generated";
import { GQLUpdateProductMutationVariables } from "./IdFieldInForm.gql.generated";
import isEqual from "lodash.isequal";
const rootBlocks = {
    image: DamImageBlock
};
type FormValues = Omit<GQLIdFieldInFormFragment, keyof typeof rootBlocks> & {
    image: BlockState<typeof rootBlocks.image>;
};
interface FormProps {
    id?: string;
    type: GQLProductType;
    slug: string;
}
export function IdFieldInForm({ id, type, slug }: FormProps) {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();
    const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(productQuery, id ? { variables: { id } } : { skip: true });
    const initialValues = useMemo<Partial<FormValues>>(() => data?.product
        ? {
            ...filterByFragment<GQLIdFieldInFormFragment>(productFormFragment, data.product),
            image: rootBlocks.image.input2State(data.product.image)
        }
        : {
            image: rootBlocks.image.defaultValues()
        }, [data]);
    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "product", id);
            return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });
    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts())
            throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            image: rootBlocks.image.state2Output(formValues.image),
        };
        if (mode === "edit") {
            const { id, ...updateInput } = output;
            await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
                mutation: updateProductMutation,
                variables: { id, input: updateInput },
            });
        }
        else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                mutation: createProductMutation,
                variables: { input: { ...output, slug, type } },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createProduct.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };
    if (error)
        throw error;
    if (loading) {
        return <Loading behavior="fillPageHeight"/>;
    }
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode={mode} initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{}}>
                {() => (<>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField readOnly disabled endAdornment={<InputAdornment position="end"><Lock /></InputAdornment>} variant="horizontal" fullWidth name="id" label={<FormattedMessage id="product.id" defaultMessage="ID"/>}/>

        <TextField required variant="horizontal" fullWidth name="title" label={<FormattedMessage id="product.title" defaultMessage="Title"/>}/>
        <Field name="image" isEqual={isEqual} label={<FormattedMessage id="product.image" defaultMessage="Image"/>} variant="horizontal" fullWidth>
            {createFinalFormBlock(rootBlocks.image)}
        </Field>
                        </>
                    </>)}
            </FinalForm>);
}
