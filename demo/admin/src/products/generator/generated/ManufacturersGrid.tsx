// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { GQLManufacturersGridQuery, GQLManufacturersGridQueryVariables, GQLManufacturersGridFutureFragment, GQLDeleteManufacturerMutation, GQLDeleteManufacturerMutationVariables } from "./ManufacturersGrid.generated";
import { FormattedMessage } from "react-intl";
import { FormattedNumber } from "react-intl";
import { useIntl } from "react-intl";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Button } from "@comet/admin";
import { CrudContextMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridIdColumn } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { StackLink } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { Tooltip } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { IconButton } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridColumnHeaderTitle } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { useMemo } from "react";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
import { Info as InfoIcon } from "@comet/admin-icons";
const manufacturersFragment = gql`
        fragment ManufacturersGridFuture on Manufacturer {
            id
            name address { street streetNumber zip alternativeAddress { street streetNumber zip } } addressAsEmbeddable { street streetNumber zip alternativeAddress { street streetNumber zip } }
        }
    `;
const manufacturersQuery = gql`
    query ManufacturersGrid($offset: Int!, $limit: Int!, $sort: [ManufacturerSort!], $search: String, $filter: ManufacturerFilter) {
        manufacturers(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes { ...ManufacturersGridFuture } totalCount
        }
    }
    ${manufacturersFragment}
    `;
const deleteManufacturerMutation = gql`
                mutation DeleteManufacturer($id: ID!) {
                    deleteManufacturer(id: $id)
                }
            `;
function ManufacturersGridToolbar() {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="manufacturer.manufacturersGridFuture.newEntry" defaultMessage={`Add Manufacturer`}/>
    </Button>
            </DataGridToolbar>);
}
export function ManufacturersGrid() {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote({
            queryParamsPrefix: "manufacturers",
        }), ...usePersistentColumnState("ManufacturersGrid") };
    const columns: GridColDef<GQLManufacturersGridFutureFragment>[] = useMemo(() => {
        return [
            { ...dataGridIdColumn, field: "id",
                headerName: intl.formatMessage({ id: "manufacturer.id", defaultMessage: "ID" }),
                sortable: false,
                flex: 1,
                minWidth: 150, },
            { field: "name",
                headerName: intl.formatMessage({ id: "manufacturer.name", defaultMessage: "Name" }),
                flex: 1,
                minWidth: 150, },
            { field: "address_street",
                headerName: intl.formatMessage({ id: "manufacturer.address.street", defaultMessage: "Street" }),
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.street,
                flex: 1,
                minWidth: 150, },
            { field: "address_streetNumber",
                headerName: intl.formatMessage({ id: "manufacturer.address.streetNumber", defaultMessage: "Street number" }),
                type: "number",
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.streetNumber,
                renderCell: ({ value }) => {
                    return (typeof value === "number") ? <FormattedNumber value={value} minimumFractionDigits={0} maximumFractionDigits={0}/> : "";
                },
                flex: 1,
                minWidth: 150, },
            { field: "address_zip",
                headerName: intl.formatMessage({ id: "manufacturer.address.zip", defaultMessage: "Zip" }),
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.zip,
                flex: 1,
                minWidth: 150, },
            { field: "address_alternativeAddress_street",
                renderHeader: () => (<>
                                        <GridColumnHeaderTitle label={intl.formatMessage({ id: "manufacturer.address.alternativeAddress.street", defaultMessage: "Alt-Street" })} columnWidth={150}/>
                                        <Tooltip title={<FormattedMessage id="manufacturer.address.alternativeAddress.street.tooltip" defaultMessage="Street of alternative address"/>}>
                                            <InfoIcon sx={{ marginLeft: 1 }}/>
                                        </Tooltip>
                                    </>),
                headerName: intl.formatMessage({ id: "manufacturer.address.alternativeAddress.street", defaultMessage: "Alt-Street" }),
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.alternativeAddress?.street,
                flex: 1,
                minWidth: 150, },
            { field: "address_alternativeAddress_streetNumber",
                renderHeader: () => (<>
                                        <GridColumnHeaderTitle label={intl.formatMessage({ id: "manufacturer.address.alternativeAddress.streetNumber", defaultMessage: "Alt-Street number" })} columnWidth={150}/>
                                        <Tooltip title={<FormattedMessage id="manufacturer.address.alternativeAddress.streetNumber.tooltip" defaultMessage="Street number of alternative address"/>}>
                                            <InfoIcon sx={{ marginLeft: 1 }}/>
                                        </Tooltip>
                                    </>),
                headerName: intl.formatMessage({ id: "manufacturer.address.alternativeAddress.streetNumber", defaultMessage: "Alt-Street number" }),
                type: "number",
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.alternativeAddress?.streetNumber,
                renderCell: ({ value }) => {
                    return (typeof value === "number") ? <FormattedNumber value={value} minimumFractionDigits={0} maximumFractionDigits={0}/> : "";
                },
                flex: 1,
                minWidth: 150, },
            { field: "address_alternativeAddress_zip",
                renderHeader: () => (<>
                                        <GridColumnHeaderTitle label={intl.formatMessage({ id: "manufacturer.address.alternativeAddress.zip", defaultMessage: "Alt-Zip" })} columnWidth={150}/>
                                        <Tooltip title={<FormattedMessage id="manufacturer.address.alternativeAddress.zip.tooltip" defaultMessage="Zip of alternative address"/>}>
                                            <InfoIcon sx={{ marginLeft: 1 }}/>
                                        </Tooltip>
                                    </>),
                headerName: intl.formatMessage({ id: "manufacturer.address.alternativeAddress.zip", defaultMessage: "Alt-Zip" }),
                filterable: false,
                sortable: false,
                valueGetter: (params, row) => row.address?.alternativeAddress?.zip,
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_street",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.street", defaultMessage: "Street 2" }),
                valueGetter: (params, row) => row.addressAsEmbeddable?.street,
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_streetNumber",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.streetNumber", defaultMessage: "Street number 2" }),
                type: "number",
                valueGetter: (params, row) => row.addressAsEmbeddable?.streetNumber,
                renderCell: ({ value }) => {
                    return (typeof value === "number") ? <FormattedNumber value={value} minimumFractionDigits={0} maximumFractionDigits={0}/> : "";
                },
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_zip",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.zip", defaultMessage: "Zip 2" }),
                valueGetter: (params, row) => row.addressAsEmbeddable?.zip,
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_alternativeAddress_street",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.alternativeAddress.street", defaultMessage: "Alt-Street 2" }),
                valueGetter: (params, row) => row.addressAsEmbeddable?.alternativeAddress?.street,
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_alternativeAddress_streetNumber",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.alternativeAddress.streetNumber", defaultMessage: "Alt-Street number 2" }),
                type: "number",
                valueGetter: (params, row) => row.addressAsEmbeddable?.alternativeAddress?.streetNumber,
                renderCell: ({ value }) => {
                    return (typeof value === "number") ? <FormattedNumber value={value} minimumFractionDigits={0} maximumFractionDigits={0}/> : "";
                },
                flex: 1,
                minWidth: 150, },
            { field: "addressAsEmbeddable_alternativeAddress_zip",
                headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.alternativeAddress.zip", defaultMessage: "Alt-Zip 2" }),
                valueGetter: (params, row) => row.addressAsEmbeddable?.alternativeAddress?.zip,
                flex: 1,
                minWidth: 150, },
            { field: "actions",
                headerName: "",
                sortable: false,
                filterable: false,
                type: "actions",
                align: "right",
                pinned: "right",
                width: 84,
                renderCell: (params) => {
                    return (<>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                        <CrudContextMenu onDelete={async () => {
                            await client.mutate<GQLDeleteManufacturerMutation, GQLDeleteManufacturerMutationVariables>({
                                mutation: deleteManufacturerMutation,
                                variables: { id: params.row.id },
                            });
                        }} refetchQueries={[manufacturersQuery]}/>
                                    
                                </>);
                }, }
        ];
    }, [intl, client]);
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLManufacturersGridQuery, GQLManufacturersGridQueryVariables>(manufacturersQuery, {
        variables: {
            filter: gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel, columns)
        },
    });
    const rowCount = useBufferedRowCount(data?.manufacturers.totalCount);
    if (error)
        throw error;
    const rows = data?.manufacturers.nodes ?? [];
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: ManufacturersGridToolbar as GridSlotsComponent["toolbar"],
        }}/>);
}
