// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { gql } from "@apollo/client";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { GQLProductCategoryTypesSelectQuery } from "./ProductHighlightForm.generated";
import { GQLProductCategoryTypesSelectQueryVariables } from "./ProductHighlightForm.generated";
import { AsyncAutocompleteField } from "@comet/admin";
import { OnChangeField } from "@comet/admin";
import { GQLProductCategoriesSelectQuery } from "./ProductHighlightForm.generated";
import { GQLProductCategoriesSelectQueryVariables } from "./ProductHighlightForm.generated";
import { GQLProductsSelectQuery } from "./ProductHighlightForm.generated";
import { GQLProductsSelectQueryVariables } from "./ProductHighlightForm.generated";
import { productHighlightFormFragment } from "./ProductHighlightForm.gql";
import { GQLProductHighlightFormDetailsFragment } from "./ProductHighlightForm.gql.generated";
import { productHighlightQuery } from "./ProductHighlightForm.gql";
import { GQLProductHighlightQuery } from "./ProductHighlightForm.gql.generated";
import { GQLProductHighlightQueryVariables } from "./ProductHighlightForm.gql.generated";
import { createProductHighlightMutation } from "./ProductHighlightForm.gql";
import { GQLCreateProductHighlightMutation } from "./ProductHighlightForm.gql.generated";
import { GQLCreateProductHighlightMutationVariables } from "./ProductHighlightForm.gql.generated";
import { updateProductHighlightMutation } from "./ProductHighlightForm.gql";
import { GQLUpdateProductHighlightMutation } from "./ProductHighlightForm.gql.generated";
import { GQLUpdateProductHighlightMutationVariables } from "./ProductHighlightForm.gql.generated";
import isEqual from "lodash.isequal";
type FormValues = GQLProductHighlightFormDetailsFragment & {
    productCategoryType?: {
        id: string;
        title: string;
    };
    productCategory?: {
        id: string;
        title: string;
    };
};
interface FormProps {
    id?: string;
}
export function ProductHighlightForm({ id }: FormProps) {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();
    const { data, error, loading, refetch } = useQuery<GQLProductHighlightQuery, GQLProductHighlightQueryVariables>(productHighlightQuery, id ? { variables: { id } } : { skip: true });
    const initialValues = useMemo<Partial<FormValues>>(() => data?.productHighlight
        ? {
            ...filterByFragment<GQLProductHighlightFormDetailsFragment>(productHighlightFormFragment, data.productHighlight),
            productCategoryType: data.productHighlight.product?.category?.type,
            productCategory: data.productHighlight.product?.category
        }
        : {}, [data]);
    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "productHighlight", id);
            return resolveHasSaveConflict(data?.productHighlight.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });
    const handleSubmit = async ({ productCategoryType, productCategory, ...formValues }: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts())
            throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            product: formValues.product?.id,
        };
        if (mode === "edit") {
            if (!id)
                throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateProductHighlightMutation, GQLUpdateProductHighlightMutationVariables>({
                mutation: updateProductHighlightMutation,
                variables: { id, input: updateInput },
            });
        }
        else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductHighlightMutation, GQLCreateProductHighlightMutationVariables>({
                mutation: createProductHighlightMutation,
                variables: { input: output },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createProductHighlight.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };
    if (error)
        throw error;
    if (loading) {
        return <Loading behavior="fillPageHeight"/>;
    }
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode={mode} initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{ values: true }}>
                {({ values, form }) => (<>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField required variant="horizontal" fullWidth name="description" label={<FormattedMessage id="productHighlight.description" defaultMessage="Description"/>}/>
        <AsyncAutocompleteField required variant="horizontal" fullWidth name="productCategoryType" label={<FormattedMessage id="productHighlight.productCategoryType" defaultMessage="Product Category Type"/>} loadOptions={async (search?: string) => {
                const { data } = await client.query<GQLProductCategoryTypesSelectQuery, GQLProductCategoryTypesSelectQueryVariables>({
                    query: gql`query ProductCategoryTypesSelect(
                            
                            
                            $search: String
                        ) {
                            productCategoryTypes(
                                
                                search: $search
                            ) {
                                nodes {
                                    id
                                    title
                                }
                            }
                        }`, variables: {
                        search,
                    }
                });
                return data.productCategoryTypes.nodes;
            }} getOptionLabel={(option) => option.title}/>
        <AsyncAutocompleteField required variant="horizontal" fullWidth name="productCategory" label={<FormattedMessage id="productHighlight.productCategory" defaultMessage="Product Category"/>} loadOptions={async (search?: string) => {
                const { data } = await client.query<GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables>({
                    query: gql`query ProductCategoriesSelect(
                            $filter: ProductCategoryFilter
                            ,
                            $search: String
                        ) {
                            productCategories(
                                filter: $filter,
                                search: $search
                            ) {
                                nodes {
                                    id
                                    title
                                }
                            }
                        }`, variables: {
                        filter: { type: { equal: values.productCategoryType?.id } },
                        search,
                    }
                });
                return data.productCategories.nodes;
            }} getOptionLabel={(option) => option.title} disabled={!values?.productCategoryType}/><OnChangeField name="productCategoryType">
                            {(value, previousValue) => {
                if (value.id !== previousValue.id) {
                    form.change("productCategory", undefined);
                }
            }}
                        </OnChangeField>
        <AsyncAutocompleteField required variant="horizontal" fullWidth name="product" label={<FormattedMessage id="productHighlight.product" defaultMessage="Product"/>} loadOptions={async (search?: string) => {
                const { data } = await client.query<GQLProductsSelectQuery, GQLProductsSelectQueryVariables>({
                    query: gql`query ProductsSelect(
                            $filter: ProductFilter
                            ,
                            $search: String
                        ) {
                            products(
                                filter: $filter,
                                search: $search
                            ) {
                                nodes {
                                    id
                                    title
                                }
                            }
                        }`, variables: {
                        filter: { category: { equal: values.productCategory?.id } },
                        search,
                    }
                });
                return data.products.nodes;
            }} getOptionLabel={(option) => option.title} disabled={!values?.productCategory}/><OnChangeField name="productCategory">
                            {(value, previousValue) => {
                if (value.id !== previousValue.id) {
                    form.change("product", undefined);
                }
            }}
                        </OnChangeField>
                        </>
                    </>)}
            </FinalForm>);
}
