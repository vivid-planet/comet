// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { gql } from "@apollo/client";
import { AsyncSelectField } from "@comet/admin";
import { CheckboxField } from "@comet/admin";
import { Field } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { TextAreaField } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { BlockState } from "@comet/cms-admin";
import { createFinalFormBlock } from "@comet/cms-admin";
import { InputAdornment } from "@mui/material";
import { FormApi } from "final-form";
import { GQLProductType } from "@src/graphql.generated";
import { DamImageBlock } from "@comet/cms-admin";
import { validateTitle } from "../validateTitle";
import { GQLProductCategoriesSelectQuery } from "./CreateCapProductForm.generated";
import { GQLProductCategoriesSelectQueryVariables } from "./CreateCapProductForm.generated";
import { CalendarToday as CalendarTodayIcon } from "@comet/admin-icons";
import { GQLCreateCapProductFormDetailsFragment } from "./CreateCapProductForm.gql.generated";
import { createProductMutation } from "./CreateCapProductForm.gql";
import { GQLCreateProductMutation } from "./CreateCapProductForm.gql.generated";
import { GQLCreateProductMutationVariables } from "./CreateCapProductForm.gql.generated";
import isEqual from "lodash.isequal";
const rootBlocks = {
    image: DamImageBlock
};
type FormValues = Omit<GQLCreateCapProductFormDetailsFragment, keyof typeof rootBlocks> & {
    image: BlockState<typeof rootBlocks.image>;
};
interface FormProps {
    type: GQLProductType;
}
export function CreateCapProductForm({ type }: FormProps) {
    const client = useApolloClient();
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();
    const initialValues = {
        inStock: false,
        image: rootBlocks.image.defaultValues()
    };
    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        const output = {
            ...formValues,
            description: formValues.description ?? null, category: formValues.category ? formValues.category.id : null, image: rootBlocks.image.state2Output(formValues.image),
        };
        const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
            mutation: createProductMutation,
            variables: { input: { ...output, type } },
        });
        if (!event.navigatingBack) {
            const id = mutationResponse?.createProduct.id;
            if (id) {
                setTimeout(() => {
                    stackSwitchApi.activatePage(`edit`, id);
                });
            }
        }
    };
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode="add" initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{}}>
                {() => (<>
                            
        <TextField required variant="horizontal" fullWidth name="title" label={<FormattedMessage id="product.title" defaultMessage="Titel"/>} validate={validateTitle}/>

        <TextField required variant="horizontal" fullWidth name="slug" label={<FormattedMessage id="product.slug" defaultMessage="Slug"/>}/>

        <TextAreaField variant="horizontal" fullWidth name="description" label={<FormattedMessage id="product.description" defaultMessage="Description"/>}/>
        <AsyncSelectField variant="horizontal" fullWidth name="category" label={<FormattedMessage id="product.category" defaultMessage="Category"/>} loadOptions={async () => {
                const { data } = await client.query<GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables>({
                    query: gql`query ProductCategoriesSelect {
                            productCategories {
                                nodes {
                                    id
                                    title
                                }
                            }
                        }`
                });
                return data.productCategories.nodes;
            }} getOptionLabel={(option) => option.title}/>
        <CheckboxField label={<FormattedMessage id="product.inStock" defaultMessage="In Stock"/>} name="inStock" fullWidth variant="horizontal"/>

            <Field variant="horizontal" fullWidth name="availableSince" component={FinalFormDatePicker} label={<FormattedMessage id="product.availableSince" defaultMessage="Available Since"/>} startAdornment={<InputAdornment position="start"><CalendarTodayIcon /></InputAdornment>}/>
        <Field name="image" isEqual={isEqual} label={<FormattedMessage id="product.image" defaultMessage="Image"/>} variant="horizontal" fullWidth>
            {createFinalFormBlock(rootBlocks.image)}
        </Field>
                        </>)}
            </FinalForm>);
}
