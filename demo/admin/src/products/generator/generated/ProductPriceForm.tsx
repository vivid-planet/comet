// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { Loading } from "@comet/admin";
import { NumberField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { InputAdornment } from "@mui/material";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { productFormFragment } from "./ProductPriceForm.gql";
import { GQLProductPriceFormDetailsFragment } from "./ProductPriceForm.gql.generated";
import { productQuery } from "./ProductPriceForm.gql";
import { GQLProductQuery } from "./ProductPriceForm.gql.generated";
import { GQLProductQueryVariables } from "./ProductPriceForm.gql.generated";
import { updateProductMutation } from "./ProductPriceForm.gql";
import { GQLUpdateProductMutation } from "./ProductPriceForm.gql.generated";
import { GQLUpdateProductMutationVariables } from "./ProductPriceForm.gql.generated";
import isEqual from "lodash.isequal";
type FormValues = Omit<GQLProductPriceFormDetailsFragment, "price"> & {
    price?: string;
};
interface FormProps {
    id: string;
}
export function ProductPriceForm({ id }: FormProps) {
    const client = useApolloClient();
    const formApiRef = useFormApiRef<FormValues>();
    const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(productQuery, { variables: { id } });
    const initialValues = useMemo<Partial<FormValues>>(() => data?.product
        ? {
            ...filterByFragment<GQLProductPriceFormDetailsFragment>(productFormFragment, data.product),
            price: data.product.price ? String(data.product.price) : undefined
        }
        : {}, [data]);
    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "product", id);
            return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });
    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>) => {
        if (await saveConflict.checkForConflicts())
            throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            price: formValues.price ? parseFloat(formValues.price) : null,
        };
        if (!id)
            throw new Error();
        const { ...updateInput } = output;
        await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
            mutation: updateProductMutation,
            variables: { id, input: updateInput },
        });
    };
    if (error)
        throw error;
    if (loading) {
        return <Loading behavior="fillPageHeight"/>;
    }
    return (<FinalForm<FormValues> apiRef={formApiRef} onSubmit={handleSubmit} mode="edit" initialValues={initialValues} initialValuesEqual={isEqual} //required to compare block data correctly
     subscription={{}}>
                {() => (<>
                        {saveConflict.dialogs}
                        <>
                            
            <NumberField variant="horizontal" fullWidth name="price" label={<FormattedMessage id="product.price" defaultMessage="Price"/>} decimals={2} startAdornment={<InputAdornment position="start">â‚¬</InputAdornment>} helperText={<FormattedMessage id="product.price.helperText" defaultMessage="Enter price in this format: 123.45"/>}/>
                        </>
                    </>)}
            </FinalForm>);
}
