// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { useApolloClient, useQuery } from "@apollo/client";
import { Field, filterByFragment, FinalForm, type FinalFormSubmitEvent, Loading, TextField, useFormApiRef, useStackSwitchApi } from "@comet/admin";
import { Lock } from "@comet/admin-icons";
import { type BlockState, createFinalFormBlock, DamImageBlock, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { InputAdornment } from "@mui/material";
import { type GQLProductType } from "@src/graphql.generated";
import { type FormApi } from "final-form";
import isEqual from "lodash.isequal";
import { useMemo } from "react";
import { FormattedMessage } from "react-intl";

import { createProductMutation, productFormFragment, productQuery, updateProductMutation } from "./IdFieldInForm.gql";
import {
    type GQLCreateProductMutation,
    type GQLCreateProductMutationVariables,
    type GQLIdFieldInFormFragment,
    type GQLProductQuery,
    type GQLProductQueryVariables,
    type GQLUpdateProductMutation,
    type GQLUpdateProductMutationVariables,
} from "./IdFieldInForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
};

type FormValues = GQLIdFieldInFormFragment & {
    image: BlockState<typeof rootBlocks.image>;
};

interface FormProps {
    id?: string;
    type: GQLProductType;
    description: string;
    slug: string;
}

export function ProductForm({ id, type, description, slug }: FormProps) {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(
        productQuery,
        id ? { variables: { id } } : { skip: true },
    );

    const initialValues = useMemo<Partial<FormValues>>(
        () =>
            data?.product
                ? {
                      ...filterByFragment<GQLIdFieldInFormFragment>(productFormFragment, data.product),
                      image: rootBlocks.image.input2State(data.product.image),
                  }
                : {
                      image: rootBlocks.image.defaultValues(),
                  },
        [data],
    );

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "product", id);
            return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            image: rootBlocks.image.state2Output(formValues.image),
        };
        if (mode === "edit") {
            const { id, ...updateInput } = output;
            await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
                mutation: updateProductMutation,
                variables: { id, input: updateInput },
            });
        } else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                mutation: createProductMutation,
                variables: { input: { ...output, slug, description, type } },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createProduct.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <Loading behavior="fillPageHeight" />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <>
                    {saveConflict.dialogs}
                    <>
                        <TextField
                            readOnly
                            disabled
                            endAdornment={
                                <InputAdornment position="end">
                                    <Lock />
                                </InputAdornment>
                            }
                            variant="horizontal"
                            fullWidth
                            name="id"
                            label={<FormattedMessage id="product.id" defaultMessage="ID" />}
                        />

                        <TextField
                            required
                            variant="horizontal"
                            fullWidth
                            name="title"
                            label={<FormattedMessage id="product.title" defaultMessage="Title" />}
                        />
                        <Field
                            name="image"
                            isEqual={isEqual}
                            label={<FormattedMessage id="product.image" defaultMessage="Image" />}
                            variant="horizontal"
                            fullWidth
                        >
                            {createFinalFormBlock(rootBlocks.image)}
                        </Field>
                    </>
                </>
            )}
        </FinalForm>
    );
}
