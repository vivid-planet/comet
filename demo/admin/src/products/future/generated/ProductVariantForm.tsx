// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    AsyncSelectField,
    Field,
    filterByFragment,
    FinalForm,
    FinalFormSubmitEvent,
    Loading,
    TextField,
    useFormApiRef,
    useStackSwitchApi,
} from "@comet/admin";
import { BlockState, createFinalFormBlock } from "@comet/blocks-admin";
import { DamImageBlock, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { FormApi } from "final-form";
import isEqual from "lodash.isequal";
import React from "react";
import { FormattedMessage } from "react-intl";

import { GQLProductsSelectQuery, GQLProductsSelectQueryVariables } from "./ProductVariantForm.generated";
import {
    createProductVariantMutation,
    productVariantFormFragment,
    productVariantQuery,
    updateProductVariantMutation,
} from "./ProductVariantForm.gql";
import {
    GQLCreateProductVariantMutation,
    GQLCreateProductVariantMutationVariables,
    GQLProductVariantFormDetailsFragment,
    GQLProductVariantQuery,
    GQLProductVariantQueryVariables,
    GQLUpdateProductVariantMutation,
    GQLUpdateProductVariantMutationVariables,
} from "./ProductVariantForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
};

type FormValues = GQLProductVariantFormDetailsFragment & {
    image: BlockState<typeof rootBlocks.image>;
};

interface FormProps {
    id?: string;
}

export function ProductVariantForm({ id }: FormProps): React.ReactElement {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLProductVariantQuery, GQLProductVariantQueryVariables>(
        productVariantQuery,
        id ? { variables: { id } } : { skip: true },
    );

    const initialValues = React.useMemo<Partial<FormValues>>(
        () =>
            data?.productVariant
                ? {
                      ...filterByFragment<GQLProductVariantFormDetailsFragment>(productVariantFormFragment, data.productVariant),
                      image: rootBlocks.image.input2State(data.productVariant.image),
                  }
                : {
                      image: rootBlocks.image.defaultValues(),
                  },
        [data],
    );

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "productVariant", id);
            return resolveHasSaveConflict(data?.productVariant.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async ({ product: { id: product }, ...formValues }: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            image: rootBlocks.image.state2Output(formValues.image),
        };
        if (mode === "edit") {
            if (!id) throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateProductVariantMutation, GQLUpdateProductVariantMutationVariables>({
                mutation: updateProductVariantMutation,
                variables: { id, input: updateInput },
            });
        } else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductVariantMutation, GQLCreateProductVariantMutationVariables>({
                mutation: createProductVariantMutation,
                variables: { input: { ...output }, product },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createProductVariant.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <Loading behavior="fillPageHeight" />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <>
                    {saveConflict.dialogs}
                    <>
                        <AsyncSelectField
                            required
                            variant="horizontal"
                            fullWidth
                            readOnly={mode === "edit"}
                            disabled={mode === "edit"}
                            name="product"
                            label={<FormattedMessage id="productVariant.product" defaultMessage="Product" />}
                            loadOptions={async () => {
                                const { data } = await client.query<GQLProductsSelectQuery, GQLProductsSelectQueryVariables>({
                                    query: gql`
                                        query ProductsSelect {
                                            products {
                                                nodes {
                                                    id
                                                    title
                                                }
                                            }
                                        }
                                    `,
                                });
                                return data.products.nodes;
                            }}
                            getOptionLabel={(option) => option.title}
                        />

                        <TextField
                            required
                            variant="horizontal"
                            fullWidth
                            name="name"
                            label={<FormattedMessage id="productVariant.name" defaultMessage="Name" />}
                        />
                        <Field
                            name="image"
                            isEqual={isEqual}
                            label={<FormattedMessage id="productVariant.image" defaultMessage="Image" />}
                            variant="horizontal"
                            fullWidth
                        >
                            {createFinalFormBlock(rootBlocks.image)}
                        </Field>
                    </>
                </>
            )}
        </FinalForm>
    );
}
