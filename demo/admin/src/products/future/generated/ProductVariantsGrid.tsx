// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import { Button, CrudContextMenu, CrudMoreActionsMenu, DataGridToolbar, ExportApi, filterByFragment, GridFilterButton, GridCellContent, GridColDef, dataGridDateTimeColumn, dataGridDateColumn, renderStaticSelectCell, messages, muiGridFilterToGql, muiGridSortToGql, StackLink, FillSpace, Tooltip, useBufferedRowCount, useDataGridExcelExport, useDataGridRemote, usePersistentColumnState, } from "@comet/admin";
import { Add as AddIcon, Edit, Info, MoreVertical, Excel } from "@comet/admin-icons";
import { BlockPreviewContent, useContentScope } from "@comet/cms-admin";
import { Alert, Box, IconButton, Typography, useTheme, Menu, MenuItem, ListItemIcon, ListItemText, CircularProgress } from "@mui/material";
import { DataGridPro, GridLinkOperator, GridRenderCellParams, GridSlotsComponent, GridToolbarProps, GridColumnHeaderTitle, GridToolbarQuickFilter, GridRowOrderChangeParams } from "@mui/x-data-grid-pro";
import { GQLProductVariantsGridQuery, GQLProductVariantsGridQueryVariables, GQLProductVariantsGridFutureFragment, GQLCreateProductVariantMutation, GQLCreateProductVariantMutationVariables, GQLUpdateProductVariantPositionMutation, GQLUpdateProductVariantPositionMutationVariables, GQLDeleteProductVariantMutation, GQLDeleteProductVariantMutationVariables } from "./ProductVariantsGrid.generated";
import { ReactNode } from "react";
import { FormattedMessage, FormattedNumber, useIntl } from "react-intl";
import { DamImageBlock } from "@comet/cms-admin";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
const productVariantsFragment = gql `
        fragment ProductVariantsGridFuture on ProductVariant {
            id
            name createdAt
        }
    `;
const productVariantsQuery = gql `
        query ProductVariantsGrid($product: ID!, $offset: Int!, $limit: Int!, $sort: [ProductVariantSort!], $search: String, $filter: ProductVariantFilter) {
    productVariants(product: $product, offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
                nodes {
                    ...ProductVariantsGridFuture
                }
                totalCount
            }
        }
        ${productVariantsFragment}
    `;
const deleteProductVariantMutation = gql `
                mutation DeleteProductVariant($id: ID!) {
                    deleteProductVariant(id: $id)
                }
            `;
const createProductVariantMutation = gql `
        mutation CreateProductVariant($product: ID!, $input: ProductVariantInput!) {
            createProductVariant(product: $product, input: $input) {
                id
            }
        }
    `;
function ProductVariantsGridToolbar() {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="productVariant.productVariantsGridFuture.newEntry" defaultMessage={`New Product Variant`}/>
    </Button>
            </DataGridToolbar>);
}
type Props = {
    product: string;
};
export function ProductVariantsGrid({ product }: Props) {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote({
            queryParamsPrefix: "product-variants",
        }), ...usePersistentColumnState("ProductVariantsGrid") };
    const columns: GridColDef<GQLProductVariantsGridFutureFragment>[] = [
        { field: "name",
            headerName: intl.formatMessage({ id: "productVariant.name", defaultMessage: "Name" }),
            flex: 1,
            minWidth: 150, },
        { ...dataGridDateColumn, field: "createdAt",
            headerName: intl.formatMessage({ id: "productVariant.createdAt", defaultMessage: "Created at" }),
            flex: 1,
            minWidth: 150, },
        { field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (<>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                        <CrudContextMenu copyData={() => {
                        // Don't copy id, because we want to create a new entity with this data
                        const { id, ...filteredData } = filterByFragment(productVariantsFragment, params.row);
                        return {
                            ...filteredData,
                            image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image))
                        };
                    }} onPaste={async ({ input }) => {
                        await client.mutate<GQLCreateProductVariantMutation, GQLCreateProductVariantMutationVariables>({
                            mutation: createProductVariantMutation,
                            variables: { product, input },
                        });
                    }} onDelete={async () => {
                        await client.mutate<GQLDeleteProductVariantMutation, GQLDeleteProductVariantMutationVariables>({
                            mutation: deleteProductVariantMutation,
                            variables: { id: params.row.id },
                        });
                    }} refetchQueries={[productVariantsQuery]}/>
                                    
                                </>);
            }, }
    ];
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLProductVariantsGridQuery, GQLProductVariantsGridQueryVariables>(productVariantsQuery, {
        variables: {
            product, filter: gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel)
        },
    });
    const rowCount = useBufferedRowCount(data?.productVariants.totalCount);
    if (error)
        throw error;
    const rows = data?.productVariants.nodes ?? [];
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: ProductVariantsGridToolbar as GridSlotsComponent["toolbar"],
        }}/>);
}
