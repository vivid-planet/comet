// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    DataGridToolbar,
    filterByFragment,
    GridCellContent,
    GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { DamImageBlock } from "@comet/cms-admin";
import { DataGridPro, GridRenderCellParams, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import * as React from "react";
import { FormattedMessage, FormattedNumber, useIntl } from "react-intl";

import {
    GQLCombinationFieldsTestProductsGridFutureFragment,
    GQLCreateProductMutation,
    GQLCreateProductMutationVariables,
    GQLDeleteProductMutation,
    GQLDeleteProductMutationVariables,
    GQLProductsGridQuery,
    GQLProductsGridQueryVariables,
} from "./CombinationFieldsTestProductsGrid.generated";

const productsFragment = gql`
    fragment CombinationFieldsTestProductsGridFuture on Product {
        id
        title
        category {
            title
        }
        type
        inStock
        price
    }
`;

const productsQuery = gql`
    query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
        products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...CombinationFieldsTestProductsGridFuture
            }
            totalCount
        }
    }
    ${productsFragment}
`;

const deleteProductMutation = gql`
    mutation DeleteProduct($id: ID!) {
        deleteProduct(id: $id)
    }
`;

const createProductMutation = gql`
    mutation CreateProduct($input: ProductInput!) {
        createProduct(input: $input) {
            id
        }
    }
`;

function ProductsGridToolbar({ toolbarAction }: { toolbarAction?: React.ReactNode }) {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            {toolbarAction && <ToolbarActions>{toolbarAction}</ToolbarActions>}
        </DataGridToolbar>
    );
}

type Props = {
    toolbarAction?: React.ReactNode;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rowAction?: (params: GridRenderCellParams<any, GQLCombinationFieldsTestProductsGridFutureFragment, any>) => React.ReactNode;
    actionsColumnWidth?: number;
};

export function ProductsGrid({ toolbarAction, rowAction, actionsColumnWidth = 52 }: Props): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ProductsGrid") };

    const columns: GridColDef<GQLCombinationFieldsTestProductsGridFutureFragment>[] = [
        {
            field: "titleAndCategory",
            headerName: intl.formatMessage({ id: "product.titleAndCategory", defaultMessage: "Title and Category" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                return (
                    <GridCellContent
                        primaryText={row.title}
                        secondaryText={
                            row.category?.title ?? (
                                <FormattedMessage id="product.titleAndCategory.secondaryText.empty" defaultMessage="No category set" />
                            )
                        }
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "staticSelectType",
            headerName: intl.formatMessage({ id: "product.staticSelectType", defaultMessage: "Type (static select)" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                const primaryEmptyMessage = "-";
                const typePrimaryLabels: Record<string, React.ReactNode> = {
                    Cap: <FormattedMessage id="product.staticSelectType.primaryText.Cap" defaultMessage="great Cap" />,
                    Shirt: <FormattedMessage id="product.staticSelectType.primaryText.Shirt" defaultMessage="Shirt" />,
                    Tie: <FormattedMessage id="product.staticSelectType.primaryText.Tie" defaultMessage="Tie" />,
                };
                return (
                    <GridCellContent
                        primaryText={row.type == null ? primaryEmptyMessage : typePrimaryLabels[`${row.type}`] ?? row.type}
                        secondaryText={row.type}
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "staticSelectInStock",
            headerName: intl.formatMessage({ id: "product.staticSelectInStock", defaultMessage: "In stock (static select)" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                const primaryEmptyMessage = <FormattedMessage id="product.staticSelectInStock.primaryText.empty" defaultMessage="No stock info" />;
                const inStockPrimaryLabels: Record<string, React.ReactNode> = {
                    true: <FormattedMessage id="product.staticSelectInStock.primaryText.true" defaultMessage={`It's in stock :D`} />,
                    false: <FormattedMessage id="product.staticSelectInStock.primaryText.false" defaultMessage="No longer available :(" />,
                };
                return (
                    <GridCellContent
                        primaryText={row.inStock == null ? primaryEmptyMessage : inStockPrimaryLabels[`${row.inStock}`] ?? row.inStock}
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "staticTextExample",
            headerName: intl.formatMessage({ id: "product.staticTextExample", defaultMessage: "Static text" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                return (
                    <GridCellContent
                        primaryText={<FormattedMessage id="product.staticTextExample.primaryText" defaultMessage="Lorem ipsum" />}
                        secondaryText={<FormattedMessage id="product.staticTextExample.secondaryText" defaultMessage="Foo bar" />}
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "currencyAndNumber",
            headerName: intl.formatMessage({ id: "product.currencyAndNumber", defaultMessage: "Price (currency and number)" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                return (
                    <GridCellContent
                        primaryText={
                            typeof row.price === "undefined" || row.price === null ? (
                                <FormattedMessage id="product.currencyAndNumber.primaryText.empty" defaultMessage="No price set" />
                            ) : (
                                <FormattedNumber
                                    value={row.price}
                                    minimumFractionDigits={2}
                                    maximumFractionDigits={2}
                                    style="currency"
                                    currency="EUR"
                                />
                            )
                        }
                        secondaryText={
                            typeof row.price === "undefined" || row.price === null ? (
                                "-"
                            ) : (
                                <FormattedNumber value={row.price} minimumFractionDigits={4} maximumFractionDigits={4} />
                            )
                        }
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "weightAndFileSize",
            headerName: intl.formatMessage({ id: "product.weightAndFileSize", defaultMessage: "Weight and file-size format" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                return (
                    <GridCellContent
                        primaryText={
                            typeof row.price === "undefined" || row.price === null ? (
                                "-"
                            ) : (
                                <FormattedNumber value={row.price} style="unit" unit="kilogram" />
                            )
                        }
                        secondaryText={
                            typeof row.price === "undefined" || row.price === null ? (
                                "-"
                            ) : (
                                <FormattedNumber
                                    value={row.price}
                                    minimumFractionDigits={1}
                                    maximumFractionDigits={1}
                                    style="unit"
                                    unit="kilobyte"
                                    unitDisplay="short"
                                />
                            )
                        }
                    />
                );
            },
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: actionsColumnWidth,
            renderCell: (params) => {
                return (
                    <>
                        {rowAction && rowAction(params)}
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(productsFragment, params.row);
                                return {
                                    ...filteredData,
                                    image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image)),
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                                    mutation: createProductMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteProductMutation, GQLDeleteProductMutationVariables>({
                                    mutation: deleteProductMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[productsQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error) throw error;
    const rows = data?.products.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            disableSelectionOnClick
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            components={{
                Toolbar: ProductsGridToolbar,
            }}
            componentsProps={{
                toolbar: { toolbarAction },
            }}
        />
    );
}
