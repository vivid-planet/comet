// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useQuery } from "@apollo/client";
import {
    DataGridToolbar,
    GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    renderStaticSelectCell,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { DataGridPro, DataGridProProps, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import * as React from "react";
import { useIntl } from "react-intl";

import { GQLProductsGridQuery, GQLProductsGridQueryVariables, GQLSelectProductsGridFutureFragment } from "./SelectProductsGrid.generated";

const productsFragment = gql`
    fragment SelectProductsGridFuture on Product {
        id
        title
        description
        price
        type
        availableSince
        createdAt
    }
`;

const productsQuery = gql`
    query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
        products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...SelectProductsGridFuture
            }
            totalCount
        }
    }
    ${productsFragment}
`;

function ProductsGridToolbar() {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
        </DataGridToolbar>
    );
}

type Props = {
    selectionModel?: DataGridProProps["selectionModel"];
    onSelectionModelChange?: DataGridProProps["onSelectionModelChange"];
};

export function ProductsGrid({ selectionModel, onSelectionModelChange }: Props): React.ReactElement {
    const intl = useIntl();
    const dataGridProps = {
        ...useDataGridRemote(),
        ...usePersistentColumnState("ProductsGrid"),
        selectionModel,
        onSelectionModelChange,
        checkboxSelection: true,
        keepNonExistentRowsSelected: true,
    };

    const columns: GridColDef<GQLSelectProductsGridFutureFragment>[] = [
        { field: "title", headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Titel" }), flex: 1, minWidth: 200, maxWidth: 250 },
        {
            field: "description",
            headerName: intl.formatMessage({ id: "product.description", defaultMessage: "Description" }),
            flex: 1,
            minWidth: 150,
        },
        {
            field: "price",
            headerName: intl.formatMessage({ id: "product.price", defaultMessage: "Price" }),
            type: "number",
            flex: 1,
            minWidth: 150,
            maxWidth: 150,
        },
        {
            field: "type",
            headerName: intl.formatMessage({ id: "product.type", defaultMessage: "Type" }),
            type: "singleSelect",
            valueOptions: [
                {
                    value: "Cap",
                    label: intl.formatMessage({ id: "product.type.cap", defaultMessage: "great Cap" }),
                    cellContent: intl.formatMessage({ id: "product.type.cap", defaultMessage: "great Cap" }),
                },
                {
                    value: "Shirt",
                    label: intl.formatMessage({ id: "product.type.shirt", defaultMessage: "Shirt" }),
                    cellContent: intl.formatMessage({ id: "product.type.shirt", defaultMessage: "Shirt" }),
                },
                {
                    value: "Tie",
                    label: intl.formatMessage({ id: "product.type.tie", defaultMessage: "Tie" }),
                    cellContent: intl.formatMessage({ id: "product.type.tie", defaultMessage: "Tie" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
            maxWidth: 150,
        },
        {
            field: "availableSince",
            headerName: intl.formatMessage({ id: "product.availableSince", defaultMessage: "Available Since" }),
            type: "date",
            valueGetter: ({ row }) => row.availableSince && new Date(row.availableSince),
            width: 140,
        },
        {
            field: "createdAt",
            headerName: intl.formatMessage({ id: "product.createdAt", defaultMessage: "Created At" }),
            type: "dateTime",
            valueGetter: ({ row }) => row.createdAt && new Date(row.createdAt),
            width: 170,
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error) throw error;
    const rows = data?.products.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            disableSelectionOnClick
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            components={{
                Toolbar: ProductsGridToolbar,
            }}
        />
    );
}
