// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { GQLProductsGridQuery, GQLProductsGridQueryVariables, GQLSelectProductsGridFutureFragment } from "./SelectProductsGrid.generated";
import { FormattedNumber } from "react-intl";
import { useIntl } from "react-intl";
import { gql } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { DataGridToolbar } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridDateTimeColumn } from "@comet/admin";
import { dataGridDateColumn } from "@comet/admin";
import { renderStaticSelectCell } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { DataGridProProps } from "@mui/x-data-grid-pro";
const productsFragment = gql`
        fragment SelectProductsGridFuture on Product {
            id
            title description price type availableSince createdAt
        }
    `;
const productsQuery = gql`
        query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
    products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
                nodes {
                    ...SelectProductsGridFuture
                }
                totalCount
            }
        }
        ${productsFragment}
    `;
function ProductsGridToolbar() {
    return (<DataGridToolbar>
                <GridToolbarQuickFilter />
                <GridFilterButton />
                <FillSpace />
            </DataGridToolbar>);
}
type Props = {
    rowSelectionModel?: DataGridProProps["rowSelectionModel"];
    onRowSelectionModelChange?: DataGridProProps["onRowSelectionModelChange"];
};
export function ProductsGrid({ rowSelectionModel, onRowSelectionModelChange }: Props) {
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ProductsGrid"), rowSelectionModel, onRowSelectionModelChange, checkboxSelection: true, keepNonExistentRowsSelected: true };
    const columns: GridColDef<GQLSelectProductsGridFutureFragment>[] = [
        { field: "title",
            headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Titel" }),
            flex: 1,
            minWidth: 200,
            maxWidth: 250, },
        { field: "description",
            headerName: intl.formatMessage({ id: "product.description", defaultMessage: "Description" }),
            flex: 1,
            minWidth: 150, },
        { field: "price",
            headerName: intl.formatMessage({ id: "product.price", defaultMessage: "Price" }),
            type: "number",
            renderCell: ({ value }) => {
                return (typeof value === "number") ? <FormattedNumber value={value} minimumFractionDigits={0} maximumFractionDigits={0}/> : "";
            },
            flex: 1,
            minWidth: 150,
            maxWidth: 150, },
        { field: "type",
            headerName: intl.formatMessage({ id: "product.type", defaultMessage: "Type" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.type?.toString(),
            valueOptions: [{
                    value: "Cap",
                    label: intl.formatMessage({ id: "product.type.cap", defaultMessage: "great Cap" }),
                }, {
                    value: "Shirt",
                    label: intl.formatMessage({ id: "product.type.shirt", defaultMessage: "Shirt" }),
                }, {
                    value: "Tie",
                    label: intl.formatMessage({ id: "product.type.tie", defaultMessage: "Tie" }),
                },],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
            maxWidth: 150, },
        { ...dataGridDateColumn, field: "availableSince",
            headerName: intl.formatMessage({ id: "product.availableSince", defaultMessage: "Available Since" }),
            width: 140, },
        { ...dataGridDateTimeColumn, field: "createdAt",
            headerName: intl.formatMessage({ id: "product.createdAt", defaultMessage: "Created At" }),
            width: 170, },
    ];
    const { filter: gqlFilter, search: gqlSearch, } = muiGridFilterToGql(columns, dataGridProps.filterModel);
    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: gqlFilter, search: gqlSearch, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel)
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error)
        throw error;
    const rows = data?.products.nodes ?? [];
    return (<DataGridPro {...dataGridProps} rows={rows} rowCount={rowCount} columns={columns} loading={loading} slots={{
            toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
        }}/>);
}
