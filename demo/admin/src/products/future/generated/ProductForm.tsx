// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    AsyncSelectField,
    Field,
    FieldSet,
    filterByFragment,
    FinalForm,
    FinalFormCheckbox,
    FinalFormInput,
    FinalFormSelect,
    FinalFormSubmitEvent,
    FinalFormSwitch,
    Loading,
    MainContent,
    messages,
    OnChangeField,
    TextAreaField,
    TextField,
    useFormApiRef,
    useStackSwitchApi,
} from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { Lock } from "@comet/admin-icons";
import { BlockState, createFinalFormBlock } from "@comet/blocks-admin";
import { DamImageBlock, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { FormControlLabel, InputAdornment, MenuItem } from "@mui/material";
import { FormApi } from "final-form";
import isEqual from "lodash.isequal";
import React from "react";
import { FormSpy } from "react-final-form";
import { FormattedMessage } from "react-intl";

import { validateTitle } from "../validateTitle";
import {
    GQLManufacturerCountriesSelectQuery,
    GQLManufacturerCountriesSelectQueryVariables,
    GQLManufacturersSelectQuery,
    GQLManufacturersSelectQueryVariables,
    GQLProductCategoriesSelectQuery,
    GQLProductCategoriesSelectQueryVariables,
} from "./ProductForm.generated";
import { createProductMutation, productFormFragment, productQuery, updateProductMutation } from "./ProductForm.gql";
import {
    GQLCreateProductMutation,
    GQLCreateProductMutationVariables,
    GQLProductFormDetailsFragment,
    GQLProductQuery,
    GQLProductQueryVariables,
    GQLUpdateProductMutation,
    GQLUpdateProductMutationVariables,
} from "./ProductForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
};

type FormValues = Omit<GQLProductFormDetailsFragment, "dimensions" | "manufacturerCountry"> & {
    dimensionsEnabled: boolean;
    dimensions: Omit<NonNullable<GQLProductFormDetailsFragment["dimensions"]>, "width" | "height" | "depth"> & {
        width: string;
        height: string;
        depth: string;
    };
    manufacturerCountry?: { id: string; label: string };
    image: BlockState<typeof rootBlocks.image>;
};

interface FormProps {
    id?: string;
}

export function ProductForm({ id }: FormProps): React.ReactElement {
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(
        productQuery,
        id ? { variables: { id } } : { skip: true },
    );

    const initialValues = React.useMemo<Partial<FormValues>>(
        () =>
            data?.product
                ? {
                      ...filterByFragment<GQLProductFormDetailsFragment>(productFormFragment, data.product),
                      createdAt: data.product.createdAt ? new Date(data.product.createdAt) : undefined,
                      dimensionsEnabled: !!data.product.dimensions,
                      dimensions: data.product.dimensions
                          ? {
                                width: String(data.product.dimensions.width),
                                height: String(data.product.dimensions.height),
                                depth: String(data.product.dimensions.depth),
                            }
                          : undefined,
                      manufacturerCountry: data.product.manufacturerCountry
                          ? {
                                id: data.product.manufacturerCountry?.id.country,
                                label: data.product.manufacturerCountry?.label.country,
                            }
                          : undefined,
                      availableSince: data.product.availableSince ? new Date(data.product.availableSince) : undefined,
                      image: rootBlocks.image.input2State(data.product.image),
                  }
                : {
                      inStock: false,
                      image: rootBlocks.image.defaultValues(),
                  },
        [data],
    );

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "product", id);
            return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async (
        { dimensionsEnabled, manufacturerCountry, ...formValues }: FormValues,
        form: FormApi<FormValues>,
        event: FinalFormSubmitEvent,
    ) => {
        if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            category: formValues.category?.id,
            dimensions:
                dimensionsEnabled && formValues.dimensions
                    ? {
                          width: parseFloat(formValues.dimensions.width),
                          height: parseFloat(formValues.dimensions.height),
                          depth: parseFloat(formValues.dimensions.depth),
                      }
                    : null,
            manufacturer: formValues.manufacturer?.id,
            image: rootBlocks.image.state2Output(formValues.image),
        };
        if (mode === "edit") {
            if (!id) throw new Error();
            const { createdAt, ...updateInput } = output;
            await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
                mutation: updateProductMutation,
                variables: { id, input: updateInput },
            });
        } else {
            const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                mutation: createProductMutation,
                variables: { input: output },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createProduct.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <Loading behavior="fillPageHeight" />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{ values: true }}
        >
            {({ values, form }) => (
                <>
                    {saveConflict.dialogs}
                    <MainContent>
                        <FieldSet
                            initiallyExpanded
                            title={<FormattedMessage id="product.mainData.title" defaultMessage="Main Data" />}
                            supportText={
                                mode === "edit" && (
                                    <FormSpy subscription={{ values: true }}>
                                        {({ values }) => (
                                            <FormattedMessage
                                                id="product.mainData.supportText"
                                                defaultMessage="Product: {title}"
                                                values={{ ...values }}
                                            />
                                        )}
                                    </FormSpy>
                                )
                            }
                        >
                            <TextField
                                required
                                variant="horizontal"
                                fullWidth
                                name="title"
                                label={<FormattedMessage id="product.title" defaultMessage="Titel" />}
                                validate={validateTitle}
                            />

                            <TextField
                                required
                                variant="horizontal"
                                fullWidth
                                name="slug"
                                label={<FormattedMessage id="product.slug" defaultMessage="Slug" />}
                            />

                            <Field
                                readOnly
                                disabled
                                endAdornment={
                                    <InputAdornment position="end">
                                        <Lock />
                                    </InputAdornment>
                                }
                                variant="horizontal"
                                fullWidth
                                name="createdAt"
                                component={FinalFormDatePicker}
                                label={<FormattedMessage id="product.createdAt" defaultMessage="Created" />}
                            />

                            <TextAreaField
                                required
                                variant="horizontal"
                                fullWidth
                                name="description"
                                label={<FormattedMessage id="product.description" defaultMessage="Description" />}
                            />
                            <Field
                                required
                                variant="horizontal"
                                fullWidth
                                name="type"
                                label={<FormattedMessage id="product.type" defaultMessage="Type" />}
                            >
                                {(props) => (
                                    <FinalFormSelect {...props}>
                                        <MenuItem value="Cap">
                                            <FormattedMessage id="product.type.cap" defaultMessage="Cap" />
                                        </MenuItem>
                                        <MenuItem value="Shirt">
                                            <FormattedMessage id="product.type.shirt" defaultMessage="Shirt" />
                                        </MenuItem>
                                        <MenuItem value="Tie">
                                            <FormattedMessage id="product.type.tie" defaultMessage="Tie" />
                                        </MenuItem>
                                    </FinalFormSelect>
                                )}
                            </Field>
                            <AsyncSelectField
                                variant="horizontal"
                                fullWidth
                                name="category"
                                label={<FormattedMessage id="product.category" defaultMessage="Category" />}
                                loadOptions={async () => {
                                    const { data } = await client.query<GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables>({
                                        query: gql`
                                            query ProductCategoriesSelect {
                                                productCategories {
                                                    nodes {
                                                        id
                                                        title
                                                    }
                                                }
                                            }
                                        `,
                                    });
                                    return data.productCategories.nodes;
                                }}
                                getOptionLabel={(option) => option.title}
                            />
                            <Field
                                fullWidth
                                name="dimensionsEnabled"
                                type="checkbox"
                                label={<FormattedMessage id="product.dimensions.dimensionsEnabled" defaultMessage="Configure dimensions" />}
                            >
                                {(props) => (
                                    <FormControlLabel
                                        control={<FinalFormSwitch {...props} />}
                                        label={props.input.checked ? <FormattedMessage {...messages.yes} /> : <FormattedMessage {...messages.no} />}
                                    />
                                )}
                            </Field>
                            <Field name="dimensionsEnabled" subscription={{ value: true }}>
                                {({ input: { value } }) =>
                                    value ? (
                                        <>
                                            <Field
                                                required
                                                variant="horizontal"
                                                fullWidth
                                                name="dimensions.width"
                                                component={FinalFormInput}
                                                type="number"
                                                label={<FormattedMessage id="product.width" defaultMessage="Width" />}
                                            />

                                            <Field
                                                required
                                                variant="horizontal"
                                                fullWidth
                                                name="dimensions.height"
                                                component={FinalFormInput}
                                                type="number"
                                                label={<FormattedMessage id="product.height" defaultMessage="Height" />}
                                            />

                                            <Field
                                                required
                                                variant="horizontal"
                                                fullWidth
                                                name="dimensions.depth"
                                                component={FinalFormInput}
                                                type="number"
                                                label={<FormattedMessage id="product.depth" defaultMessage="Depth" />}
                                            />
                                        </>
                                    ) : null
                                }
                            </Field>
                        </FieldSet>

                        <FieldSet collapsible title={<FormattedMessage id="product.additionalData.title" defaultMessage="Additional Data" />}>
                            <AsyncSelectField
                                variant="horizontal"
                                fullWidth
                                name="manufacturerCountry"
                                label={<FormattedMessage id="product.manufacturerCountry" defaultMessage="Manufacturer Country" />}
                                loadOptions={async () => {
                                    const { data } = await client.query<
                                        GQLManufacturerCountriesSelectQuery,
                                        GQLManufacturerCountriesSelectQueryVariables
                                    >({
                                        query: gql`
                                            query ManufacturerCountriesSelect {
                                                manufacturerCountries {
                                                    nodes {
                                                        id
                                                        label
                                                    }
                                                }
                                            }
                                        `,
                                    });
                                    return data.manufacturerCountries.nodes;
                                }}
                                getOptionLabel={(option) => option.label}
                            />
                            <AsyncSelectField
                                variant="horizontal"
                                fullWidth
                                name="manufacturer"
                                label={<FormattedMessage id="product.manufacturer" defaultMessage="Manufacturer" />}
                                loadOptions={async () => {
                                    const { data } = await client.query<GQLManufacturersSelectQuery, GQLManufacturersSelectQueryVariables>({
                                        query: gql`
                                            query ManufacturersSelect($filter: ManufacturerFilter) {
                                                manufacturers(filter: $filter) {
                                                    nodes {
                                                        id
                                                        name
                                                    }
                                                }
                                            }
                                        `,
                                        variables: { filter: { addressAsEmbeddable_country: { equal: values.manufacturerCountry?.id } } },
                                    });
                                    return data.manufacturers.nodes;
                                }}
                                getOptionLabel={(option) => option.name}
                                disabled={!values?.manufacturerCountry}
                            />
                            <OnChangeField name="manufacturerCountry">
                                {(value, previousValue) => {
                                    if (value.id !== previousValue.id) {
                                        form.change("manufacturer", undefined);
                                    }
                                }}
                            </OnChangeField>
                            <Field name="inStock" label="" type="checkbox" variant="horizontal" fullWidth>
                                {(props) => (
                                    <FormControlLabel
                                        label={<FormattedMessage id="product.inStock" defaultMessage="In Stock" />}
                                        control={<FinalFormCheckbox {...props} />}
                                    />
                                )}
                            </Field>

                            <Field
                                variant="horizontal"
                                fullWidth
                                name="availableSince"
                                component={FinalFormDatePicker}
                                label={<FormattedMessage id="product.availableSince" defaultMessage="Available Since" />}
                            />
                            <Field name="image" isEqual={isEqual}>
                                {createFinalFormBlock(rootBlocks.image)}
                            </Field>
                        </FieldSet>
                    </MainContent>
                </>
            )}
        </FinalForm>
    );
}
