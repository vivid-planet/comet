// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { useApolloClient } from "@apollo/client";
import {
    Field,
    FinalForm,
    FinalFormCheckbox,
    FinalFormSelect,
    FinalFormSubmitEvent,
    MainContent,
    TextAreaField,
    TextField,
    useAsyncOptionsProps,
    useFormApiRef,
    useStackSwitchApi,
} from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { BlockState, createFinalFormBlock } from "@comet/blocks-admin";
import { DamImageBlock } from "@comet/cms-admin";
import { FormControlLabel } from "@mui/material";
import { GQLProductType } from "@src/graphql.generated";
import { FormApi } from "final-form";
import isEqual from "lodash.isequal";
import React from "react";
import { FormattedMessage } from "react-intl";

import { validateTitle } from "../validateTitle";
import { createProductMutation, productCategoriesQuery } from "./CreateCapProductForm.gql";
import {
    GQLCreateCapProductFormDetailsFragment,
    GQLCreateProductMutation,
    GQLCreateProductMutationVariables,
    GQLProductCategoriesSelectQuery,
    GQLProductCategoriesSelectQueryVariables,
    GQLProductCategorySelectFragment,
} from "./CreateCapProductForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
};

type FormValues = GQLCreateCapProductFormDetailsFragment & {
    image: BlockState<typeof rootBlocks.image>;
};

interface FormProps {
    type: GQLProductType;
}

export function CreateCapProductForm({ type }: FormProps): React.ReactElement {
    const client = useApolloClient();

    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const initialValues = {
        inStock: false,
        image: rootBlocks.image.defaultValues(),
    };

    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        const output = {
            ...formValues,
            category: formValues.category?.id,
            image: rootBlocks.image.state2Output(formValues.image),
        };

        const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
            mutation: createProductMutation,
            variables: { input: { ...output, type } },
        });
        if (!event.navigatingBack) {
            const id = mutationResponse?.createProduct.id;
            if (id) {
                setTimeout(() => {
                    stackSwitchApi.activatePage(`edit`, id);
                });
            }
        }
    };

    const categorySelectAsyncProps = useAsyncOptionsProps(async () => {
        const result = await client.query<GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables>({
            query: productCategoriesQuery,
        });
        return result.data.productCategories.nodes;
    });

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode="add"
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <>
                    <MainContent>
                        <TextField
                            required
                            fullWidth
                            name="title"
                            label={<FormattedMessage id="product.title" defaultMessage="Titel" />}
                            validate={validateTitle}
                        />

                        <TextField required fullWidth name="slug" label={<FormattedMessage id="product.slug" defaultMessage="Slug" />} />

                        <TextAreaField
                            required
                            fullWidth
                            name="description"
                            label={<FormattedMessage id="product.description" defaultMessage="Description" />}
                        />
                        <Field
                            fullWidth
                            name="category"
                            label={<FormattedMessage id="product.category" defaultMessage="Category" />}
                            component={FinalFormSelect}
                            {...categorySelectAsyncProps}
                            getOptionLabel={(option: GQLProductCategorySelectFragment) => option.title}
                        />
                        <Field name="inStock" label="" type="checkbox" fullWidth>
                            {(props) => (
                                <FormControlLabel
                                    label={<FormattedMessage id="product.inStock" defaultMessage="In Stock" />}
                                    control={<FinalFormCheckbox {...props} />}
                                />
                            )}
                        </Field>

                        <Field
                            fullWidth
                            name="availableSince"
                            component={FinalFormDatePicker}
                            label={<FormattedMessage id="product.availableSince" defaultMessage="Available Since" />}
                        />
                        <Field name="image" isEqual={isEqual}>
                            {createFinalFormBlock(rootBlocks.image)}
                        </Field>
                    </MainContent>
                </>
            )}
        </FinalForm>
    );
}
