// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient } from "@apollo/client";
import {
    AsyncSelectField,
    Field,
    FinalForm,
    FinalFormCheckbox,
    FinalFormSubmitEvent,
    TextAreaField,
    TextField,
    useFormApiRef,
    useStackSwitchApi,
} from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { CalendarToday as CalendarTodayIcon } from "@comet/admin-icons";
import { BlockState, createFinalFormBlock, DamImageBlock } from "@comet/cms-admin";
import { FormControlLabel, InputAdornment } from "@mui/material";
import { GQLProductType } from "@src/graphql.generated";
import { FormApi } from "final-form";
import isEqual from "lodash.isequal";
import { FormattedMessage } from "react-intl";

import { validateTitle } from "../validateTitle";
import { GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables } from "./CreateCapProductForm.generated";
import { createProductMutation } from "./CreateCapProductForm.gql";
import {
    GQLCreateCapProductFormDetailsFragment,
    GQLCreateProductMutation,
    GQLCreateProductMutationVariables,
} from "./CreateCapProductForm.gql.generated";

const rootBlocks = {
    image: DamImageBlock,
};

type FormValues = GQLCreateCapProductFormDetailsFragment & {
    image: BlockState<typeof rootBlocks.image>;
};

interface FormProps {
    type: GQLProductType;
}

export function CreateCapProductForm({ type }: FormProps) {
    const client = useApolloClient();

    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const initialValues = {
        inStock: false,
        image: rootBlocks.image.defaultValues(),
    };

    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        const output = {
            ...formValues,
            category: formValues.category?.id,
            image: rootBlocks.image.state2Output(formValues.image),
        };

        const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
            mutation: createProductMutation,
            variables: { input: { ...output, type } },
        });
        if (!event.navigatingBack) {
            const id = mutationResponse?.createProduct.id;
            if (id) {
                setTimeout(() => {
                    stackSwitchApi.activatePage(`edit`, id);
                });
            }
        }
    };

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode="add"
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <>
                    <TextField
                        required
                        variant="horizontal"
                        fullWidth
                        name="title"
                        label={<FormattedMessage id="product.title" defaultMessage="Titel" />}
                        validate={validateTitle}
                    />

                    <TextField
                        required
                        variant="horizontal"
                        fullWidth
                        name="slug"
                        label={<FormattedMessage id="product.slug" defaultMessage="Slug" />}
                    />

                    <TextAreaField
                        required
                        variant="horizontal"
                        fullWidth
                        name="description"
                        label={<FormattedMessage id="product.description" defaultMessage="Description" />}
                    />
                    <AsyncSelectField
                        variant="horizontal"
                        fullWidth
                        name="category"
                        label={<FormattedMessage id="product.category" defaultMessage="Category" />}
                        loadOptions={async () => {
                            const { data } = await client.query<GQLProductCategoriesSelectQuery, GQLProductCategoriesSelectQueryVariables>({
                                query: gql`
                                    query ProductCategoriesSelect {
                                        productCategories {
                                            nodes {
                                                id
                                                title
                                            }
                                        }
                                    }
                                `,
                            });
                            return data.productCategories.nodes;
                        }}
                        getOptionLabel={(option) => option.title}
                    />
                    <Field name="inStock" label="" type="checkbox" variant="horizontal" fullWidth>
                        {(props) => (
                            <FormControlLabel
                                label={<FormattedMessage id="product.inStock" defaultMessage="In Stock" />}
                                control={<FinalFormCheckbox {...props} />}
                            />
                        )}
                    </Field>

                    <Field
                        variant="horizontal"
                        fullWidth
                        name="availableSince"
                        component={FinalFormDatePicker}
                        label={<FormattedMessage id="product.availableSince" defaultMessage="Available Since" />}
                        startAdornment={
                            <InputAdornment position="start">
                                <CalendarTodayIcon />
                            </InputAdornment>
                        }
                    />
                    <Field
                        name="image"
                        isEqual={isEqual}
                        label={<FormattedMessage id="product.image" defaultMessage="Image" />}
                        variant="horizontal"
                        fullWidth
                    >
                        {createFinalFormBlock(rootBlocks.image)}
                    </Field>
                </>
            )}
        </FinalForm>
    );
}
