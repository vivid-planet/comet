// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { useApolloClient, useQuery } from "@apollo/client";
import {
    Field,
    FinalForm,
    FinalFormInput,
    FinalFormSaveSplitButton,
    FinalFormSubmitEvent,
    Loading,
    MainContent,
    TextField,
    Toolbar,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    ToolbarTitleItem,
    useFormApiRef,
    useStackApi,
    useStackSwitchApi,
} from "@comet/admin";
import { ArrowLeft } from "@comet/admin-icons";
import { EditPageLayout, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { IconButton } from "@mui/material";
import { FormApi } from "final-form";
import { filter } from "graphql-anywhere";
import isEqual from "lodash.isequal";
import React from "react";
import { FormattedMessage } from "react-intl";

import { createManufacturerMutation, manufacturerFormFragment, manufacturerQuery, updateManufacturerMutation } from "./ManufacturerForm.gql";
import {
    GQLCreateManufacturerMutation,
    GQLCreateManufacturerMutationVariables,
    GQLManufacturerFormDetailsFragment,
    GQLManufacturerQuery,
    GQLManufacturerQueryVariables,
    GQLUpdateManufacturerMutation,
    GQLUpdateManufacturerMutationVariables,
} from "./ManufacturerForm.gql.generated";

type FormValues = Omit<GQLManufacturerFormDetailsFragment, "address" | "addressAsEmbeddable"> & {
    address:
        | (Omit<NonNullable<GQLManufacturerFormDetailsFragment["address"]>, "streetNumber" | "zip" | "alternativeAddress"> & {
              streetNumber: string | null;
              zip: string;
              alternativeAddress:
                  | (Omit<NonNullable<NonNullable<GQLManufacturerFormDetailsFragment["address"]>["alternativeAddress"]>, "streetNumber" | "zip"> & {
                        streetNumber: string | null;
                        zip: string;
                    })
                  | null;
          })
        | null;
    addressAsEmbeddable: Omit<GQLManufacturerFormDetailsFragment["addressAsEmbeddable"], "streetNumber" | "zip" | "alternativeAddress"> & {
        streetNumber: string | null;
        zip: string;
        alternativeAddress: Omit<GQLManufacturerFormDetailsFragment["addressAsEmbeddable"]["alternativeAddress"], "streetNumber" | "zip"> & {
            streetNumber: string | null;
            zip: string;
        };
    };
};

interface FormProps {
    id?: string;
}

export function ManufacturerForm({ id }: FormProps): React.ReactElement {
    const stackApi = useStackApi();
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLManufacturerQuery, GQLManufacturerQueryVariables>(
        manufacturerQuery,
        id ? { variables: { id } } : { skip: true },
    );

    const initialValues = React.useMemo<Partial<FormValues>>(() => {
        const filteredData = data ? filter<GQLManufacturerFormDetailsFragment>(manufacturerFormFragment, data.manufacturer) : undefined;
        if (!filteredData) return {};

        return {
            ...filteredData,
            address: filteredData.address
                ? {
                      ...filteredData.address,
                      streetNumber: filteredData.address.streetNumber ? String(filteredData.address.streetNumber) : null,
                      zip: String(filteredData.address.zip),
                      alternativeAddress: filteredData.address.alternativeAddress
                          ? {
                                ...filteredData.address.alternativeAddress,
                                streetNumber: filteredData.address.alternativeAddress.streetNumber
                                    ? String(filteredData.address.alternativeAddress.streetNumber)
                                    : null,
                                zip: String(filteredData.address.alternativeAddress.zip),
                            }
                          : null,
                  }
                : null,
            addressAsEmbeddable: {
                ...filteredData.addressAsEmbeddable,
                streetNumber: filteredData.addressAsEmbeddable.streetNumber ? String(filteredData.addressAsEmbeddable.streetNumber) : null,
                zip: String(filteredData.addressAsEmbeddable.zip),
                alternativeAddress: {
                    ...filteredData.addressAsEmbeddable.alternativeAddress,
                    streetNumber: filteredData.addressAsEmbeddable.alternativeAddress.streetNumber
                        ? String(filteredData.addressAsEmbeddable.alternativeAddress.streetNumber)
                        : null,
                    zip: String(filteredData.addressAsEmbeddable.alternativeAddress.zip),
                },
            },
        };
    }, [data]);

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "manufacturer", id);
            return resolveHasSaveConflict(data?.manufacturer.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
        const output = {
            ...formValues,
            address: formValues.address
                ? {
                      ...formValues.address,
                      streetNumber: formValues.address.streetNumber ? parseInt(formValues.address.streetNumber) : null,
                      zip: parseInt(formValues.address.zip),
                      alternativeAddress: formValues.address.alternativeAddress
                          ? {
                                ...formValues.address.alternativeAddress,
                                streetNumber: formValues.address.alternativeAddress.streetNumber
                                    ? parseInt(formValues.address.alternativeAddress.streetNumber)
                                    : null,
                                zip: parseInt(formValues.address.alternativeAddress.zip),
                            }
                          : null,
                  }
                : null,
            addressAsEmbeddable: {
                ...formValues.addressAsEmbeddable,
                streetNumber: formValues.addressAsEmbeddable.streetNumber ? parseInt(formValues.addressAsEmbeddable.streetNumber) : null,
                zip: parseInt(formValues.addressAsEmbeddable.zip),
                alternativeAddress: {
                    ...formValues.addressAsEmbeddable.alternativeAddress,
                    streetNumber: formValues.addressAsEmbeddable.alternativeAddress.streetNumber
                        ? parseInt(formValues.addressAsEmbeddable.alternativeAddress.streetNumber)
                        : null,
                    zip: parseInt(formValues.addressAsEmbeddable.alternativeAddress.zip),
                },
            },
        };
        if (mode === "edit") {
            if (!id) throw new Error();
            const { ...updateInput } = output;
            await client.mutate<GQLUpdateManufacturerMutation, GQLUpdateManufacturerMutationVariables>({
                mutation: updateManufacturerMutation,
                variables: { id, input: updateInput },
            });
        } else {
            const { data: mutationResponse } = await client.mutate<GQLCreateManufacturerMutation, GQLCreateManufacturerMutationVariables>({
                mutation: createManufacturerMutation,
                variables: { input: output },
            });
            if (!event.navigatingBack) {
                const id = mutationResponse?.createManufacturer.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage(`edit`, id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <Loading behavior="fillPageHeight" />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            initialValuesEqual={isEqual} //required to compare block data correctly
            subscription={{}}
        >
            {() => (
                <EditPageLayout>
                    {saveConflict.dialogs}
                    <Toolbar>
                        <ToolbarItem>
                            <IconButton onClick={stackApi?.goBack}>
                                <ArrowLeft />
                            </IconButton>
                        </ToolbarItem>
                        <ToolbarTitleItem>
                            <Field name="title">
                                {({ input }) =>
                                    input.value ? (
                                        input.value
                                    ) : (
                                        <FormattedMessage id="manufacturer.manufacturerDetail" defaultMessage="Manufacturer Detail" />
                                    )
                                }
                            </Field>
                        </ToolbarTitleItem>
                        <ToolbarFillSpace />
                        <ToolbarActions>
                            <FinalFormSaveSplitButton hasConflict={saveConflict.hasConflict} />
                        </ToolbarActions>
                    </Toolbar>
                    <MainContent>
                        <TextField
                            required
                            fullWidth
                            name="address.street"
                            label={<FormattedMessage id="manufacturer.address.street" defaultMessage="Address Street" />}
                        />

                        <Field
                            fullWidth
                            name="address.streetNumber"
                            component={FinalFormInput}
                            type="number"
                            label={<FormattedMessage id="manufacturer.address.streetNumber" defaultMessage="Address Street Number" />}
                        />

                        <Field
                            required
                            fullWidth
                            name="address.zip"
                            component={FinalFormInput}
                            type="number"
                            label={<FormattedMessage id="manufacturer.address.zip" defaultMessage="Address Zip" />}
                        />

                        <TextField
                            required
                            fullWidth
                            name="address.country"
                            label={<FormattedMessage id="manufacturer.address.country" defaultMessage="Address Country" />}
                        />

                        <TextField
                            required
                            fullWidth
                            name="address.alternativeAddress.street"
                            label={
                                <FormattedMessage
                                    id="manufacturer.address.alternativeAddress.street"
                                    defaultMessage="Address Alternative Address Street"
                                />
                            }
                        />

                        <Field
                            fullWidth
                            name="address.alternativeAddress.streetNumber"
                            component={FinalFormInput}
                            type="number"
                            label={
                                <FormattedMessage
                                    id="manufacturer.address.alternativeAddress.streetNumber"
                                    defaultMessage="Address Alternative Address Street Number"
                                />
                            }
                        />

                        <Field
                            required
                            fullWidth
                            name="address.alternativeAddress.zip"
                            component={FinalFormInput}
                            type="number"
                            label={
                                <FormattedMessage id="manufacturer.address.alternativeAddress.zip" defaultMessage="Address Alternative Address Zip" />
                            }
                        />

                        <TextField
                            required
                            fullWidth
                            name="address.alternativeAddress.country"
                            label={
                                <FormattedMessage
                                    id="manufacturer.address.alternativeAddress.country"
                                    defaultMessage="Address Alternative Address Country"
                                />
                            }
                        />

                        <TextField
                            required
                            fullWidth
                            name="addressAsEmbeddable.street"
                            label={<FormattedMessage id="manufacturer.addressAsEmbeddable.street" defaultMessage="Address As Embeddable Street" />}
                        />

                        <Field
                            required
                            fullWidth
                            name="addressAsEmbeddable.streetNumber"
                            component={FinalFormInput}
                            type="number"
                            label={
                                <FormattedMessage
                                    id="manufacturer.addressAsEmbeddable.streetNumber"
                                    defaultMessage="Address As Embeddable Street Number"
                                />
                            }
                        />

                        <Field
                            required
                            fullWidth
                            name="addressAsEmbeddable.zip"
                            component={FinalFormInput}
                            type="number"
                            label={<FormattedMessage id="manufacturer.addressAsEmbeddable.zip" defaultMessage="Address As Embeddable Zip" />}
                        />

                        <TextField
                            required
                            fullWidth
                            name="addressAsEmbeddable.country"
                            label={<FormattedMessage id="manufacturer.addressAsEmbeddable.country" defaultMessage="Address As Embeddable Country" />}
                        />

                        <TextField
                            required
                            fullWidth
                            name="addressAsEmbeddable.alternativeAddress.street"
                            label={
                                <FormattedMessage
                                    id="manufacturer.addressAsEmbeddable.alternativeAddress.street"
                                    defaultMessage="Address As Embeddable Alternative Address Street"
                                />
                            }
                        />

                        <Field
                            required
                            fullWidth
                            name="addressAsEmbeddable.alternativeAddress.streetNumber"
                            component={FinalFormInput}
                            type="number"
                            label={
                                <FormattedMessage
                                    id="manufacturer.addressAsEmbeddable.alternativeAddress.streetNumber"
                                    defaultMessage="Address As Embeddable Alternative Address Street Number"
                                />
                            }
                        />

                        <Field
                            required
                            fullWidth
                            name="addressAsEmbeddable.alternativeAddress.zip"
                            component={FinalFormInput}
                            type="number"
                            label={
                                <FormattedMessage
                                    id="manufacturer.addressAsEmbeddable.alternativeAddress.zip"
                                    defaultMessage="Address As Embeddable Alternative Address Zip"
                                />
                            }
                        />

                        <TextField
                            required
                            fullWidth
                            name="addressAsEmbeddable.alternativeAddress.country"
                            label={
                                <FormattedMessage
                                    id="manufacturer.addressAsEmbeddable.alternativeAddress.country"
                                    defaultMessage="Address As Embeddable Alternative Address Country"
                                />
                            }
                        />
                    </MainContent>
                </EditPageLayout>
            )}
        </FinalForm>
    );
}
