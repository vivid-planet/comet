// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    CrudMoreActionsMenu,
    dataGridDateColumn,
    dataGridDateTimeColumn,
    DataGridToolbar,
    type ExportApi,
    filterByFragment,
    GridCellContent,
    type GridColDef,
    GridFilterButton,
    messages,
    muiGridFilterToGql,
    muiGridSortToGql,
    renderStaticSelectCell,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    Tooltip,
    useBufferedRowCount,
    useDataGridExcelExport,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Excel, Info, StateFilled as StateFilledIcon } from "@comet/admin-icons";
import { DamImageBlock } from "@comet/cms-admin";
import { CircularProgress, useTheme } from "@mui/material";
import {
    DataGridPro,
    GridColumnHeaderTitle,
    type GridRenderCellParams,
    type GridSlotsComponent,
    type GridToolbarProps,
    GridToolbarQuickFilter,
} from "@mui/x-data-grid-pro";
import { type GQLProductFilter } from "@src/graphql.generated";
import { type ReactNode } from "react";
import { FormattedMessage, FormattedNumber, useIntl } from "react-intl";

import { ProductsGridPreviewAction } from "../../ProductsGridPreviewAction";
import { ManufacturerFilterOperators } from "../ManufacturerFilter";
import {
    type GQLCreateProductMutation,
    type GQLCreateProductMutationVariables,
    type GQLDeleteProductMutation,
    type GQLDeleteProductMutationVariables,
    type GQLProductsGridFutureFragment,
    type GQLProductsGridQuery,
    type GQLProductsGridQueryVariables,
} from "./ProductsGrid.generated";

const productsFragment = gql`
    fragment ProductsGridFuture on Product {
        id
        title
        price
        type
        category {
            title
        }
        inStock
        description
        availableSince
        createdAt
        manufacturer {
            name
        }
    }
`;

const productsQuery = gql`
    query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
        products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...ProductsGridFuture
            }
            totalCount
        }
    }
    ${productsFragment}
`;

const deleteProductMutation = gql`
    mutation DeleteProduct($id: ID!) {
        deleteProduct(id: $id)
    }
`;

const createProductMutation = gql`
    mutation CreateProduct($input: ProductInput!) {
        createProduct(input: $input) {
            id
        }
    }
`;

interface ProductsGridToolbarToolbarProps extends GridToolbarProps {
    toolbarAction: React.ReactNode;
    exportApi: ExportApi;
}
function ProductsGridToolbar({ toolbarAction, exportApi }: ProductsGridToolbarToolbarProps) {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarActions>
                <CrudMoreActionsMenu
                    slotProps={{
                        button: {
                            responsive: true,
                        },
                    }}
                    overallActions={[
                        {
                            label: <FormattedMessage {...messages.downloadAsExcel} />,
                            icon: exportApi.loading ? <CircularProgress size={20} /> : <Excel />,
                            onClick: () => exportApi.exportGrid(),
                            disabled: exportApi.loading,
                        },
                    ]}
                />
                {toolbarAction}
            </ToolbarActions>
        </DataGridToolbar>
    );
}

type Props = {
    filter?: GQLProductFilter;
    toolbarAction?: ReactNode;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rowAction?: (params: GridRenderCellParams<any, GQLProductsGridFutureFragment, any>) => ReactNode;
    actionsColumnWidth?: number;
};

export function ProductsGrid({ filter, toolbarAction, rowAction, actionsColumnWidth = 52 }: Props) {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = {
        ...useDataGridRemote({
            initialSort: [
                { field: "inStock", sort: "desc" },
                { field: "price", sort: "asc" },
            ],
            initialFilter: {
                items: [{ field: "type", operator: "is", value: "Shirt" }],
            },
            queryParamsPrefix: "products",
        }),
        ...usePersistentColumnState("ProductsGrid"),
    };

    const theme = useTheme();

    const columns: GridColDef<GQLProductsGridFutureFragment>[] = [
        {
            field: "overview",
            headerName: intl.formatMessage({ id: "product.overview", defaultMessage: "Overview" }),
            filterable: false,
            sortable: false,
            renderCell: ({ row }) => {
                const typeLabels: Record<string, React.ReactNode> = {
                    Cap: <FormattedMessage id="product.overview.secondaryText.type.Cap" defaultMessage="great Cap" />,
                    Shirt: <FormattedMessage id="product.overview.secondaryText.type.Shirt" defaultMessage="Shirt" />,
                    Tie: <FormattedMessage id="product.overview.secondaryText.type.Tie" defaultMessage="Tie" />,
                };
                const inStockLabels: Record<string, React.ReactNode> = {
                    true: <FormattedMessage id="product.overview.secondaryText.inStock.true" defaultMessage="In stock" />,
                    false: <FormattedMessage id="product.overview.secondaryText.inStock.false" defaultMessage="Out of stock" />,
                };
                return (
                    <GridCellContent
                        primaryText={row.title ?? "-"}
                        secondaryText={
                            <FormattedMessage
                                id="product.overview.secondaryText"
                                defaultMessage="{price} • {type} • {category} • {inStock}"
                                values={{
                                    price:
                                        typeof row.price === "undefined" || row.price === null ? (
                                            <FormattedMessage id="product.overview.secondaryText.price.empty" defaultMessage="No price" />
                                        ) : (
                                            <FormattedNumber
                                                value={row.price}
                                                minimumFractionDigits={2}
                                                maximumFractionDigits={2}
                                                style="currency"
                                                currency="EUR"
                                            />
                                        ),
                                    type:
                                        row.type == null ? (
                                            <FormattedMessage id="product.overview.secondaryText.type.empty" defaultMessage="No type" />
                                        ) : (
                                            (typeLabels[`${row.type}`] ?? row.type)
                                        ),
                                    category: row.category?.title ?? (
                                        <FormattedMessage id="product.overview.secondaryText.category.empty" defaultMessage="No category" />
                                    ),
                                    inStock: row.inStock == null ? "-" : (inStockLabels[`${row.inStock}`] ?? row.inStock),
                                }}
                            />
                        }
                    />
                );
            },
            flex: 1,
            visible: theme.breakpoints.down("md"),
            disableExport: true,
            sortBy: ["title", "price", "type", "category", "inStock"],
            minWidth: 200,
        },
        {
            field: "title",
            headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Titel" }),
            flex: 1,
            visible: theme.breakpoints.up("md"),
            minWidth: 200,
            maxWidth: 250,
        },
        {
            field: "description",
            headerName: intl.formatMessage({ id: "product.description", defaultMessage: "Description" }),
            flex: 1,
            minWidth: 150,
        },
        {
            field: "price",
            renderHeader: () => (
                <>
                    <GridColumnHeaderTitle label={intl.formatMessage({ id: "product.price", defaultMessage: "Price" })} columnWidth={150} />
                    <Tooltip title={<FormattedMessage id="product.price.tooltip" defaultMessage="Price in EUR" />}>
                        <Info sx={{ marginLeft: 1 }} />
                    </Tooltip>
                </>
            ),
            type: "number",
            flex: 1,
            visible: theme.breakpoints.up("md"),
            minWidth: 150,
            maxWidth: 150,
        },
        {
            field: "inStock",
            headerName: intl.formatMessage({ id: "product.inStock", defaultMessage: "In stock" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.inStock?.toString(),
            valueOptions: [
                {
                    value: "true",
                    label: intl.formatMessage({ id: "product.inStock.true.primary", defaultMessage: "In stock" }),
                    cellContent: (
                        <GridCellContent
                            primaryText={<FormattedMessage id="product.inStock.true.primary" defaultMessage="In stock" />}
                            icon={<StateFilledIcon color="success" />}
                        />
                    ),
                },
                {
                    value: "false",
                    label: intl.formatMessage({ id: "product.inStock.false.primary", defaultMessage: "Out of stock" }),
                    cellContent: (
                        <GridCellContent
                            primaryText={<FormattedMessage id="product.inStock.false.primary" defaultMessage="Out of stock" />}
                            icon={<StateFilledIcon color="error" />}
                        />
                    ),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            visible: theme.breakpoints.up("md"),
            minWidth: 80,
        },
        {
            field: "type",
            headerName: intl.formatMessage({ id: "product.type", defaultMessage: "Type" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.type?.toString(),
            valueOptions: [
                {
                    value: "Cap",
                    label: intl.formatMessage({ id: "product.type.cap", defaultMessage: "great Cap" }),
                },
                {
                    value: "Shirt",
                    label: intl.formatMessage({ id: "product.type.shirt", defaultMessage: "Shirt" }),
                },
                {
                    value: "Tie",
                    label: intl.formatMessage({ id: "product.type.tie", defaultMessage: "Tie" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            visible: theme.breakpoints.up("md"),
            minWidth: 150,
            maxWidth: 150,
        },
        {
            ...dataGridDateColumn,
            field: "availableSince",
            headerName: intl.formatMessage({ id: "product.availableSince", defaultMessage: "Available Since" }),
            width: 140,
        },
        {
            ...dataGridDateTimeColumn,
            field: "createdAt",
            headerName: intl.formatMessage({ id: "product.createdAt", defaultMessage: "Created At" }),
            width: 170,
        },
        {
            field: "manufacturer",
            headerName: intl.formatMessage({ id: "product.manufacturer.name", defaultMessage: "Manufacturer" }),
            sortable: false,
            valueGetter: (params, row) => row.manufacturer?.name,
            filterOperators: ManufacturerFilterOperators,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: actionsColumnWidth,
            disableExport: true,
            renderCell: (params) => {
                return (
                    <>
                        <ProductsGridPreviewAction {...params} />
                        {rowAction && rowAction(params)}
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(productsFragment, params.row);
                                return {
                                    ...filteredData,
                                    image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image)),
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                                    mutation: createProductMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteProductMutation, GQLDeleteProductMutationVariables>({
                                    mutation: deleteProductMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[productsQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: filter ? { and: [gqlFilter, filter] } : gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize,
            limit: dataGridProps.paginationModel.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error) throw error;
    const rows = data?.products.nodes ?? [];

    const exportApi = useDataGridExcelExport<
        GQLProductsGridQuery["products"]["nodes"][0],
        GQLProductsGridQuery,
        Omit<GQLProductsGridQueryVariables, "offset" | "limit">
    >({
        columns,
        variables: {
            ...muiGridFilterToGql(columns, dataGridProps.filterModel),
        },
        query: productsQuery,
        resolveQueryNodes: (data) => data.products.nodes,
        totalCount: data?.products.totalCount ?? 0,
        exportOptions: {
            fileName: "Products",
        },
    });

    return (
        <DataGridPro
            {...dataGridProps}
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            slots={{
                toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
            }}
            slotProps={{
                toolbar: { toolbarAction, exportApi } as ProductsGridToolbarToolbarProps,
            }}
        />
    );
}
