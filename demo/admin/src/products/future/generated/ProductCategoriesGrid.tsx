// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    DataGridToolbar,
    filterByFragment,
    GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit } from "@comet/admin-icons";
import { Button, IconButton } from "@mui/material";
import { DataGridPro, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import * as React from "react";
import { FormattedMessage, useIntl } from "react-intl";

import {
    GQLCreateProductCategoryMutation,
    GQLCreateProductCategoryMutationVariables,
    GQLDeleteProductCategoryMutation,
    GQLDeleteProductCategoryMutationVariables,
    GQLProductCategoriesGridFutureFragment,
    GQLProductCategoriesGridQuery,
    GQLProductCategoriesGridQueryVariables,
} from "./ProductCategoriesGrid.generated";

const productCategoriesFragment = gql`
    fragment ProductCategoriesGridFuture on ProductCategory {
        id
        title
    }
`;

const productCategoriesQuery = gql`
    query ProductCategoriesGrid($sort: [ProductCategorySort!], $search: String, $filter: ProductCategoryFilter) {
        productCategories(sort: $sort, search: $search, filter: $filter) {
            ...ProductCategoriesGridFuture
        }
    }
    ${productCategoriesFragment}
`;

const deleteProductCategoryMutation = gql`
    mutation DeleteProductCategory($id: ID!) {
        deleteProductCategory(id: $id)
    }
`;

const createProductCategoryMutation = gql`
    mutation CreateProductCategory($input: ProductCategoryInput!) {
        createProductCategory(input: $input) {
            id
        }
    }
`;

function ProductCategoriesGridToolbar() {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarActions>
                <Button startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add" variant="contained" color="primary">
                    <FormattedMessage id="productCategory.newProductCategory" defaultMessage="New Product Category" />
                </Button>
            </ToolbarActions>
        </DataGridToolbar>
    );
}

export function ProductCategoriesGrid(): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...usePersistentColumnState("ProductCategoriesGrid") };

    const columns: GridColDef<GQLProductCategoriesGridFutureFragment>[] = [
        { field: "title", headerName: intl.formatMessage({ id: "productCategory.title", defaultMessage: "Title" }), flex: 1, minWidth: 150 },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            renderCell: (params) => {
                return (
                    <>
                        <IconButton component={StackLink} pageName="edit" payload={params.row.id}>
                            <Edit color="primary" />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(productCategoriesFragment, params.row);
                                return filteredData;
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateProductCategoryMutation, GQLCreateProductCategoryMutationVariables>({
                                    mutation: createProductCategoryMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteProductCategoryMutation, GQLDeleteProductCategoryMutationVariables>({
                                    mutation: deleteProductCategoryMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[productCategoriesQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductCategoriesGridQuery, GQLProductCategoriesGridQueryVariables>(productCategoriesQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    if (error) throw error;

    const rows = data?.productCategories ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            disableSelectionOnClick
            rows={rows}
            columns={columns}
            loading={loading}
            components={{
                Toolbar: ProductCategoriesGridToolbar,
            }}
        />
    );
}
