// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    Button,
    CrudContextMenu,
    DataGridToolbar,
    filterByFragment,
    type GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    renderStaticSelectCell,
    StackLink,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit as EditIcon } from "@comet/admin-icons";
import { DamImageBlock } from "@comet/cms-admin";
import { IconButton } from "@mui/material";
import { DataGridPro, type GridSlotsComponent, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { FormattedMessage, useIntl } from "react-intl";

import {
    type GQLCreateProductMutation,
    type GQLCreateProductMutationVariables,
    type GQLDeleteProductMutation,
    type GQLDeleteProductMutationVariables,
    type GQLProductsGridInitialFilterWithIsAnyOfFragment,
    type GQLProductsGridQuery,
    type GQLProductsGridQueryVariables,
} from "./ProductsGridInitialFitlerWithIsAnyOf.generated";

const productsFragment = gql`
    fragment ProductsGridInitialFilterWithIsAnyOf on Product {
        id
        title
        status
    }
`;

const productsQuery = gql`
    query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
        products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...ProductsGridInitialFilterWithIsAnyOf
            }
            totalCount
        }
    }
    ${productsFragment}
`;

const deleteProductMutation = gql`
    mutation DeleteProduct($id: ID!) {
        deleteProduct(id: $id)
    }
`;

const createProductMutation = gql`
    mutation CreateProduct($input: ProductInput!) {
        createProduct(input: $input) {
            id
        }
    }
`;

function ProductsGridToolbar() {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarActions>
                <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
                    <FormattedMessage id="product.productsGridInitialFilterWithIsAnyOf.newEntry" defaultMessage="New Product" />
                </Button>
            </ToolbarActions>
        </DataGridToolbar>
    );
}

export function ProductsGrid() {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = {
        ...useDataGridRemote({
            initialFilter: {
                items: [{ field: "status", operator: "isAnyOf", value: "Published,Unpublished" }],
            },
        }),
        ...usePersistentColumnState("ProductsGrid"),
    };

    const columns: GridColDef<GQLProductsGridInitialFilterWithIsAnyOfFragment>[] = [
        { field: "title", headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Title" }), flex: 1, minWidth: 150 },
        {
            field: "status",
            headerName: intl.formatMessage({ id: "product.status", defaultMessage: "Status" }),
            type: "singleSelect",
            valueFormatter: (value, row) => row.status?.toString(),
            valueOptions: [
                {
                    value: "Published",
                    label: intl.formatMessage({ id: "product.status.published", defaultMessage: "Published" }),
                },
                {
                    value: "Deleted",
                    label: intl.formatMessage({ id: "product.status.deleted", defaultMessage: "Deleted" }),
                },
                {
                    value: "Unpublished",
                    label: intl.formatMessage({ id: "product.status.unpublished", defaultMessage: "Unpublished" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (
                    <>
                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                            <EditIcon />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(productsFragment, params.row);
                                return {
                                    ...filteredData,
                                    image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image)),
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                                    mutation: createProductMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteProductMutation, GQLDeleteProductMutationVariables>({
                                    mutation: deleteProductMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[productsQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize,
            limit: dataGridProps.paginationModel.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error) throw error;
    const rows = data?.products.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            slots={{
                toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
            }}
        />
    );
}
