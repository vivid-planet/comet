// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    GridFilterButton,
    MainContent,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    Toolbar,
    ToolbarActions,
    ToolbarAutomaticTitleItem,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit } from "@comet/admin-icons";
import { Button, IconButton } from "@mui/material";
import { DataGridPro, GridColDef, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { filter as filterByFragment } from "graphql-anywhere";
import * as React from "react";
import { FormattedMessage, useIntl } from "react-intl";

import {
    GQLCreateManufacturerMutation,
    GQLCreateManufacturerMutationVariables,
    GQLDeleteManufacturerMutation,
    GQLDeleteManufacturerMutationVariables,
    GQLManufacturersGridFutureFragment,
    GQLManufacturersGridQuery,
    GQLManufacturersGridQueryVariables,
} from "./ManufacturersGrid.generated";

const manufacturersFragment = gql`
    fragment ManufacturersGridFuture on Manufacturer {
        id
        address {
            street
            streetNumber
            alternativeAddress {
                street
                streetNumber
            }
        }
        addressAsEmbeddable {
            street
            streetNumber
            alternativeAddress {
                street
                streetNumber
            }
        }
    }
`;

const manufacturersQuery = gql`
    query ManufacturersGrid($offset: Int, $limit: Int, $sort: [ManufacturerSort!], $search: String, $filter: ManufacturerFilter) {
        manufacturers(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...ManufacturersGridFuture
            }
            totalCount
        }
    }
    ${manufacturersFragment}
`;

const deleteManufacturerMutation = gql`
    mutation DeleteManufacturer($id: ID!) {
        deleteManufacturer(id: $id)
    }
`;

const createManufacturerMutation = gql`
    mutation CreateManufacturer($input: ManufacturerInput!) {
        createManufacturer(input: $input) {
            id
        }
    }
`;

function ManufacturersGridToolbar() {
    return (
        <Toolbar>
            <ToolbarAutomaticTitleItem />
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarActions>
                <Button startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add" variant="contained" color="primary">
                    <FormattedMessage id="manufacturer.newManufacturer" defaultMessage="New Manufacturer" />
                </Button>
            </ToolbarActions>
        </Toolbar>
    );
}

export function ManufacturersGrid(): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ManufacturersGrid") };

    const columns: GridColDef<GQLManufacturersGridFutureFragment>[] = [
        {
            field: "id",
            headerName: intl.formatMessage({ id: "manufacturer.id", defaultMessage: "ID" }),
            filterable: false,
            sortable: false,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_street",
            headerName: intl.formatMessage({ id: "manufacturer.address.street", defaultMessage: "Street" }),
            filterable: false,
            sortable: false,
            valueGetter: ({ row }) => row.address?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_streetNumber",
            headerName: intl.formatMessage({ id: "manufacturer.address.streetNumber", defaultMessage: "Street number" }),
            type: "number",
            filterable: false,
            sortable: false,
            valueGetter: ({ row }) => row.address?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_alternativeAddress_street",
            headerName: intl.formatMessage({ id: "manufacturer.address.alternativeAddress.street", defaultMessage: "Alt-Street" }),
            filterable: false,
            sortable: false,
            valueGetter: ({ row }) => row.address?.alternativeAddress?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_alternativeAddress_streetNumber",
            headerName: intl.formatMessage({ id: "manufacturer.address.alternativeAddress.streetNumber", defaultMessage: "Alt-Street number" }),
            type: "number",
            filterable: false,
            sortable: false,
            valueGetter: ({ row }) => row.address?.alternativeAddress?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_street",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.street", defaultMessage: "Street 2" }),
            valueGetter: ({ row }) => row.addressAsEmbeddable?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_streetNumber",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.streetNumber", defaultMessage: "Street number 2" }),
            type: "number",
            valueGetter: ({ row }) => row.addressAsEmbeddable?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_alternativeAddress_street",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.alternativeAddress.street", defaultMessage: "Alt-Street 2" }),
            valueGetter: ({ row }) => row.addressAsEmbeddable?.alternativeAddress?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_alternativeAddress_streetNumber",
            headerName: intl.formatMessage({
                id: "manufacturer.addressAsEmbeddable.alternativeAddress.streetNumber",
                defaultMessage: "Alt-Street number 2",
            }),
            type: "number",
            valueGetter: ({ row }) => row.addressAsEmbeddable?.alternativeAddress?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            renderCell: (params) => {
                return (
                    <>
                        <IconButton component={StackLink} pageName="edit" payload={params.row.id}>
                            <Edit color="primary" />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(manufacturersFragment, params.row);
                                return filteredData;
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateManufacturerMutation, GQLCreateManufacturerMutationVariables>({
                                    mutation: createManufacturerMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteManufacturerMutation, GQLDeleteManufacturerMutationVariables>({
                                    mutation: deleteManufacturerMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[manufacturersQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLManufacturersGridQuery, GQLManufacturersGridQueryVariables>(manufacturersQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.manufacturers.totalCount);
    if (error) throw error;
    const rows = data?.manufacturers.nodes ?? [];

    return (
        <MainContent fullHeight disablePadding>
            <DataGridPro
                {...dataGridProps}
                disableSelectionOnClick
                rows={rows}
                rowCount={rowCount}
                columns={columns}
                loading={loading}
                components={{
                    Toolbar: ManufacturersGridToolbar,
                }}
            />
        </MainContent>
    );
}
