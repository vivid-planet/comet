// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    DataGridToolbar,
    FillSpace,
    filterByFragment,
    GridCellContent,
    GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    renderStaticSelectCell,
    ToolbarActions,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Error as ErrorIcon, Favorite as FavoriteIcon } from "@comet/admin-icons";
import { DamImageBlock } from "@comet/cms-admin";
import { DataGridPro, GridRenderCellParams, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import * as React from "react";
import { FormattedMessage, useIntl } from "react-intl";

import {
    GQLCreateProductMutation,
    GQLCreateProductMutationVariables,
    GQLDeleteProductMutation,
    GQLDeleteProductMutationVariables,
    GQLProductsGridQuery,
    GQLProductsGridQueryVariables,
    GQLStaticSelectFieldsTestProductsGridFutureFragment,
} from "./StaticSelectFieldsTestProductsGrid.generated";

const productsFragment = gql`
    fragment StaticSelectFieldsTestProductsGridFuture on Product {
        id
        title
        inStock
        status
        soldCount
    }
`;

const productsQuery = gql`
    query ProductsGrid($offset: Int!, $limit: Int!, $sort: [ProductSort!], $search: String, $filter: ProductFilter) {
        products(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...StaticSelectFieldsTestProductsGridFuture
            }
            totalCount
        }
    }
    ${productsFragment}
`;

const deleteProductMutation = gql`
    mutation DeleteProduct($id: ID!) {
        deleteProduct(id: $id)
    }
`;

const createProductMutation = gql`
    mutation CreateProduct($input: ProductInput!) {
        createProduct(input: $input) {
            id
        }
    }
`;

function ProductsGridToolbar({ toolbarAction }: { toolbarAction?: React.ReactNode }) {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <FillSpace />
            <ToolbarActions>{toolbarAction}</ToolbarActions>
        </DataGridToolbar>
    );
}

type Props = {
    toolbarAction?: React.ReactNode;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rowAction?: (params: GridRenderCellParams<any, GQLStaticSelectFieldsTestProductsGridFutureFragment, any>) => React.ReactNode;
    actionsColumnWidth?: number;
};

export function ProductsGrid({ toolbarAction, rowAction, actionsColumnWidth = 52 }: Props): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ProductsGrid") };

    const columns: GridColDef<GQLStaticSelectFieldsTestProductsGridFutureFragment>[] = [
        { field: "title", headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Titel" }), flex: 1, minWidth: 150 },
        {
            field: "inStock",
            headerName: intl.formatMessage({ id: "product.inStock", defaultMessage: "In stock" }),
            type: "singleSelect",
            valueFormatter: ({ value }) => value?.toString(),
            valueOptions: [
                {
                    value: true,
                    label: intl.formatMessage({ id: "product.inStock.true", defaultMessage: "In Stock" }),
                },
                {
                    value: false,
                    label: intl.formatMessage({ id: "product.inStock.false", defaultMessage: "False" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "status",
            headerName: intl.formatMessage({ id: "product.status", defaultMessage: "Status" }),
            type: "singleSelect",
            valueFormatter: ({ value }) => value?.toString(),
            valueOptions: [
                {
                    value: "Published",
                    label: intl.formatMessage({ id: "product.status.published", defaultMessage: "It's published" }),
                },
                {
                    value: "Unpublished",
                    label: intl.formatMessage({ id: "product.status.unpublished", defaultMessage: "It's unpublished" }),
                },
                {
                    value: "Deleted",
                    label: intl.formatMessage({ id: "product.status.deleted", defaultMessage: "Deleted" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "soldCount",
            headerName: intl.formatMessage({ id: "product.soldCount", defaultMessage: "Sold Amount" }),
            type: "singleSelect",
            valueFormatter: ({ value }) => value?.toString(),
            valueOptions: [
                {
                    value: 0,
                    label: `${intl.formatMessage({
                        id: "product.soldCount.0.primary",
                        defaultMessage: "Nothing has ever been sold",
                    })} ${intl.formatMessage({ id: "product.soldCount.0.secondary", defaultMessage: "We need to do better" })}`,
                    cellContent: (
                        <GridCellContent
                            primaryText={<FormattedMessage id="product.soldCount.0.primary" defaultMessage="Nothing has ever been sold" />}
                            secondaryText={<FormattedMessage id="product.soldCount.0.secondary" defaultMessage="We need to do better" />}
                            icon={<ErrorIcon />}
                        />
                    ),
                },
                {
                    value: 100,
                    label: intl.formatMessage({ id: "product.soldCount.100.primary", defaultMessage: "Yay, exactly 100 sold" }),
                    cellContent: (
                        <GridCellContent
                            primaryText={<FormattedMessage id="product.soldCount.100.primary" defaultMessage="Yay, exactly 100 sold" />}
                            icon={<FavoriteIcon />}
                        />
                    ),
                },
                {
                    value: 200,
                    label: intl.formatMessage({ id: "product.soldCount.200", defaultMessage: "200" }),
                },
                {
                    value: 300,
                    label: intl.formatMessage({ id: "product.soldCount.300", defaultMessage: "300" }),
                },
            ],
            renderCell: renderStaticSelectCell,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: actionsColumnWidth,
            renderCell: (params) => {
                return (
                    <>
                        {rowAction && rowAction(params)}
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(productsFragment, params.row);
                                return {
                                    ...filteredData,
                                    image: DamImageBlock.state2Output(DamImageBlock.input2State(filteredData.image)),
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                                    mutation: createProductMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteProductMutation, GQLDeleteProductMutationVariables>({
                                    mutation: deleteProductMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[productsQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.products.totalCount);
    if (error) throw error;
    const rows = data?.products.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            disableSelectionOnClick
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            components={{
                Toolbar: ProductsGridToolbar,
            }}
            componentsProps={{
                toolbar: { toolbarAction },
            }}
        />
    );
}
