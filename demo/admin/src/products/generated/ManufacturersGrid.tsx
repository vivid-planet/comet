// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    Button,
    CrudContextMenu,
    DataGridToolbar,
    FillSpace,
    filterByFragment,
    type GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    ToolbarActions,
    ToolbarItem,
    Tooltip,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit as EditIcon, Info } from "@comet/admin-icons";
import { IconButton } from "@mui/material";
import { DataGridPro, GridColumnHeaderTitle, type GridSlotsComponent, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { FormattedMessage, useIntl } from "react-intl";

import {
    type GQLCreateManufacturerMutation,
    type GQLCreateManufacturerMutationVariables,
    type GQLDeleteManufacturerMutation,
    type GQLDeleteManufacturerMutationVariables,
    type GQLManufacturersFormFragment,
    type GQLManufacturersGridQuery,
    type GQLManufacturersGridQueryVariables,
} from "./ManufacturersGrid.generated";

const manufacturersFragment = gql`
    fragment ManufacturersForm on Manufacturer {
        id
        name
        address {
            street
            streetNumber
            alternativeAddress {
                street
                streetNumber
            }
        }
        addressAsEmbeddable {
            street
            streetNumber
            alternativeAddress {
                street
                streetNumber
            }
        }
    }
`;

const manufacturersQuery = gql`
    query ManufacturersGrid($offset: Int!, $limit: Int!, $sort: [ManufacturerSort!], $search: String, $filter: ManufacturerFilter) {
        manufacturers(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...ManufacturersForm
            }
            totalCount
        }
    }
    ${manufacturersFragment}
`;

const deleteManufacturerMutation = gql`
    mutation DeleteManufacturer($id: ID!) {
        deleteManufacturer(id: $id)
    }
`;

const createManufacturerMutation = gql`
    mutation CreateManufacturer($input: ManufacturerInput!) {
        createManufacturer(input: $input) {
            id
        }
    }
`;

function ManufacturersGridToolbar() {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <FillSpace />
            <ToolbarActions>
                <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
                    <FormattedMessage id="manufacturer.manufacturersForm.newEntry" defaultMessage="Add Manufacturer" />
                </Button>
            </ToolbarActions>
        </DataGridToolbar>
    );
}

export function ManufacturersGrid() {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = {
        ...useDataGridRemote({
            queryParamsPrefix: "manufacturers",
        }),
        ...usePersistentColumnState("ManufacturersGrid"),
    };

    const columns: GridColDef<GQLManufacturersFormFragment>[] = [
        {
            field: "id",
            headerName: intl.formatMessage({ id: "manufacturer.id", defaultMessage: "ID" }),
            filterable: false,
            sortable: false,
            flex: 1,
            minWidth: 150,
        },
        { field: "name", headerName: intl.formatMessage({ id: "manufacturer.name", defaultMessage: "Name" }), flex: 1, minWidth: 150 },
        {
            field: "address_street",
            headerName: intl.formatMessage({ id: "manufacturer.address.street", defaultMessage: "Street" }),
            filterable: false,
            sortable: false,
            valueGetter: (params, row) => row.address?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_streetNumber",
            headerName: intl.formatMessage({ id: "manufacturer.address.streetNumber", defaultMessage: "Street number" }),
            type: "number",
            filterable: false,
            sortable: false,
            valueGetter: (params, row) => row.address?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_alternativeAddress_street",
            renderHeader: () => (
                <>
                    <GridColumnHeaderTitle
                        label={intl.formatMessage({ id: "manufacturer.address.alternativeAddress.street", defaultMessage: "Alt-Street" })}
                        columnWidth={150}
                    />
                    <Tooltip
                        title={
                            <FormattedMessage
                                id="manufacturer.address.alternativeAddress.street.tooltip"
                                defaultMessage="Street of alternative address"
                            />
                        }
                    >
                        <Info sx={{ marginLeft: 1 }} />
                    </Tooltip>
                </>
            ),
            filterable: false,
            sortable: false,
            valueGetter: (params, row) => row.address?.alternativeAddress?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "address_alternativeAddress_streetNumber",
            renderHeader: () => (
                <>
                    <GridColumnHeaderTitle
                        label={intl.formatMessage({
                            id: "manufacturer.address.alternativeAddress.streetNumber",
                            defaultMessage: "Alt-Street number",
                        })}
                        columnWidth={150}
                    />
                    <Tooltip
                        title={
                            <FormattedMessage
                                id="manufacturer.address.alternativeAddress.streetNumber.tooltip"
                                defaultMessage="Street number of alternative address"
                            />
                        }
                    >
                        <Info sx={{ marginLeft: 1 }} />
                    </Tooltip>
                </>
            ),
            type: "number",
            filterable: false,
            sortable: false,
            valueGetter: (params, row) => row.address?.alternativeAddress?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_street",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.street", defaultMessage: "Street 2" }),
            valueGetter: (params, row) => row.addressAsEmbeddable?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_streetNumber",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.streetNumber", defaultMessage: "Street number 2" }),
            type: "number",
            valueGetter: (params, row) => row.addressAsEmbeddable?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_alternativeAddress_street",
            headerName: intl.formatMessage({ id: "manufacturer.addressAsEmbeddable.alternativeAddress.street", defaultMessage: "Alt-Street 2" }),
            valueGetter: (params, row) => row.addressAsEmbeddable?.alternativeAddress?.street,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "addressAsEmbeddable_alternativeAddress_streetNumber",
            headerName: intl.formatMessage({
                id: "manufacturer.addressAsEmbeddable.alternativeAddress.streetNumber",
                defaultMessage: "Alt-Street number 2",
            }),
            type: "number",
            valueGetter: (params, row) => row.addressAsEmbeddable?.alternativeAddress?.streetNumber,
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (
                    <>
                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                            <EditIcon />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                // Don't copy id, because we want to create a new entity with this data
                                const { id, ...filteredData } = filterByFragment(manufacturersFragment, params.row);
                                return filteredData;
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateManufacturerMutation, GQLCreateManufacturerMutationVariables>({
                                    mutation: createManufacturerMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteManufacturerMutation, GQLDeleteManufacturerMutationVariables>({
                                    mutation: deleteManufacturerMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[manufacturersQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLManufacturersGridQuery, GQLManufacturersGridQueryVariables>(manufacturersQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize,
            limit: dataGridProps.paginationModel.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.manufacturers.totalCount);
    if (error) throw error;
    const rows = data?.manufacturers.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            slots={{
                toolbar: ManufacturersGridToolbar as GridSlotsComponent["toolbar"],
            }}
        />
    );
}
