// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { gql, useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    dataGridDateColumn,
    DataGridToolbar,
    GridColDef,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Edit as EditIcon } from "@comet/admin-icons";
import { IconButton } from "@mui/material";
import { DataGridPro, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { useContentScope } from "@src/common/ContentScopeProvider";
import * as React from "react";
import { useIntl } from "react-intl";

import {
    GQLDeleteFormBuilderMutation,
    GQLDeleteFormBuilderMutationVariables,
    GQLFormBuildersGridFragment,
    GQLFormBuildersGridQuery,
    GQLFormBuildersGridQueryVariables,
} from "./FormBuildersGrid.generated";

const formBuildersFragment = gql`
    fragment FormBuildersGrid on FormBuilder {
        id
        name
        createdAt
        updatedAt
    }
`;

const formBuildersQuery = gql`
    query FormBuildersGrid(
        $offset: Int!
        $limit: Int!
        $sort: [FormBuilderSort!]
        $search: String
        $filter: FormBuilderFilter
        $scope: FormBuilderContentScopeInput!
    ) {
        formBuilders(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter, scope: $scope) {
            nodes {
                ...FormBuildersGrid
            }
            totalCount
        }
    }
    ${formBuildersFragment}
`;

const deleteFormBuilderMutation = gql`
    mutation DeleteFormBuilder($id: ID!) {
        deleteFormBuilder(id: $id)
    }
`;

function FormBuildersGridToolbar({ toolbarAction }: { toolbarAction?: React.ReactNode }) {
    return (
        <DataGridToolbar>
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarFillSpace />
            {toolbarAction && <ToolbarActions>{toolbarAction}</ToolbarActions>}
        </DataGridToolbar>
    );
}

type Props = {
    toolbarAction?: React.ReactNode;
};

export function FormBuildersGrid({ toolbarAction }: Props): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("FormBuildersGrid") };
    const { scope } = useContentScope();

    const columns: GridColDef<GQLFormBuildersGridFragment>[] = [
        { field: "name", headerName: intl.formatMessage({ id: "formBuilder.name", defaultMessage: "Name" }), flex: 1, minWidth: 150 },
        {
            ...dataGridDateColumn,
            field: "createdAt",
            headerName: intl.formatMessage({ id: "formBuilder.createdAt", defaultMessage: "Erstellt am" }),
            flex: 1,
            minWidth: 150,
        },
        {
            ...dataGridDateColumn,
            field: "updatedAt",
            headerName: intl.formatMessage({ id: "formBuilder.updatedAt", defaultMessage: "Zuletzt geÃ¤ndert" }),
            flex: 1,
            minWidth: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            align: "right",
            pinned: "right",
            width: 84,
            renderCell: (params) => {
                return (
                    <>
                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                            <EditIcon />
                        </IconButton>
                        <CrudContextMenu
                            onDelete={async () => {
                                await client.mutate<GQLDeleteFormBuilderMutation, GQLDeleteFormBuilderMutationVariables>({
                                    mutation: deleteFormBuilderMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[formBuildersQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLFormBuildersGridQuery, GQLFormBuildersGridQueryVariables>(formBuildersQuery, {
        variables: {
            scope,
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.formBuilders.totalCount);
    if (error) throw error;
    const rows = data?.formBuilders.nodes ?? [];

    return (
        <DataGridPro
            {...dataGridProps}
            disableSelectionOnClick
            rows={rows}
            rowCount={rowCount}
            columns={columns}
            loading={loading}
            components={{
                Toolbar: FormBuildersGridToolbar,
            }}
            componentsProps={{
                toolbar: { toolbarAction },
            }}
        />
    );
}
