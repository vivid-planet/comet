"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeGeneratedFile = writeGeneratedFile;
exports.removeUnusedImports = removeUnusedImports;
var fs_1 = require("fs");
var path = require("path");
var typescript_1 = require("typescript");
function writeGeneratedFile(filePath, contents) {
    return __awaiter(this, void 0, void 0, function () {
        var header, sourceFile, result, printer, prettyCode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    header = "// This file has been generated by comet api-generator.\n    // You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.\n    ";
                    return [4 /*yield*/, fs_1.promises.mkdir(path.dirname(filePath), { recursive: true })];
                case 1:
                    _a.sent();
                    sourceFile = typescript_1.default.createSourceFile(filePath, header + contents, typescript_1.default.ScriptTarget.ES2024, true, typescript_1.default.ScriptKind.TS);
                    result = typescript_1.default.transform(sourceFile, [removeUnusedImports()]);
                    printer = typescript_1.default.createPrinter({
                        newLine: typescript_1.default.NewLineKind.LineFeed,
                        removeComments: false,
                    });
                    prettyCode = printer.printFile(result.transformed[0]);
                    result.dispose();
                    return [4 /*yield*/, fs_1.promises.writeFile(filePath, prettyCode)];
                case 2:
                    _a.sent();
                    console.log("generated ".concat(filePath));
                    return [2 /*return*/];
            }
        });
    });
}
function removeUnusedImports() {
    return function (context) {
        function visit(sourceFile) {
            var usedIdentifiers = new Set();
            // Step 1: Collect all used identifiers
            function collectUsage(node) {
                if (typescript_1.default.isIdentifier(node)) {
                    usedIdentifiers.add(node.text);
                }
                else if (typescript_1.default.isImportDeclaration(node)) {
                    // Skip import declarations (those identifiers are not usages)
                    return;
                }
                typescript_1.default.forEachChild(node, collectUsage);
            }
            typescript_1.default.forEachChild(sourceFile, collectUsage);
            // Step 2: Visit and update the import declarations
            function visitor(node) {
                if (typescript_1.default.isImportDeclaration(node) && node.importClause) {
                    var _a = node.importClause, name_1 = _a.name, namedBindings = _a.namedBindings;
                    var updatedBindings = [];
                    if (name_1 && usedIdentifiers.has(name_1.text)) {
                        // default import is used
                    }
                    else if (name_1) {
                        // default import is unused
                        return undefined;
                    }
                    if (namedBindings && typescript_1.default.isNamedImports(namedBindings)) {
                        for (var _i = 0, _b = namedBindings.elements; _i < _b.length; _i++) {
                            var specifier = _b[_i];
                            var importName = specifier.name.text;
                            if (usedIdentifiers.has(importName)) {
                                updatedBindings.push(specifier);
                            }
                        }
                        if (updatedBindings.length === 0 && !name_1) {
                            // nothing left in this import
                            return undefined;
                        }
                        return typescript_1.default.factory.updateImportDeclaration(node, node.modifiers, typescript_1.default.factory.updateImportClause(node.importClause, node.importClause.isTypeOnly, name_1, updatedBindings.length > 0 ? typescript_1.default.factory.updateNamedImports(namedBindings, updatedBindings) : undefined), node.moduleSpecifier, node.assertClause);
                    }
                    if (!namedBindings && !name_1) {
                        // empty import, probably a side-effect import
                        return node;
                    }
                    return node;
                }
                return typescript_1.default.visitEachChild(node, visitor, context);
            }
            return typescript_1.default.visitNode(sourceFile, visitor);
        }
        return function (sourceFile) { return visit(sourceFile); };
    };
}
