type CurrentUser {
  name: String!
  role: String!
}

type ImageCropArea {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

enum FocalPoint {
  SMART
  CENTER
  NORTHWEST
  NORTHEAST
  SOUTHWEST
  SOUTHEAST
}

type DamFileImage {
  id: ID!
  width: Int!
  height: Int!
  exif: JSONObject
  dominantColor: String
  cropArea: ImageCropArea!
  url(width: Int!, height: Int!): String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type DamFolder {
  id: ID!
  name: String!
  parent: DamFolder
  numberOfChildFolders: Int!
  numberOfFiles: Int!
  mpath: [ID!]!
  archived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  parents: [DamFolder!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DamFile {
  id: ID!
  folder: DamFolder
  name: String!
  size: Int!
  mimetype: String!
  contentHash: String!
  title: String
  altText: String
  archived: Boolean!
  image: DamFileImage
  createdAt: DateTime!
  updatedAt: DateTime!
  fileUrl: String!
  duplicates: [DamFile!]!
  damPath: String!
}

type BuildTemplate {
  id: ID!
  name: String!
}

type AutoBuildStatus {
  hasChangesSinceLastBuild: Boolean!
  lastCheck: DateTime
  nextCheck: DateTime!
}

type Build {
  id: ID!
  status: JobStatus!
  name: String
  trigger: String
  startTime: DateTime
  completionTime: DateTime
  estimatedCompletionTime: DateTime
}

enum JobStatus {
  pending
  active
  succeeded
  failed
}

type PaginatedDamItems {
  nodes: [DamItem!]!
  totalCount: Int!
}

union DamItem = DamFile | DamFolder

type FilenameResponse {
  name: String!
  folderId: ID
  isOccupied: Boolean!
}

type PaginatedDamFiles {
  nodes: [DamFile!]!
  totalCount: Int!
}

type PaginatedDamFolders {
  nodes: [DamFolder!]!
  totalCount: Int!
}

type PageTreeNode {
  id: ID!
  parentId: String
  pos: Int!
  name: String!
  slug: String!
  visibility: PageTreeNodeVisibility!
  documentType: String!
  hideInMenu: Boolean!
  category: String!
  childNodes: [PageTreeNode!]!
  parentNode: PageTreeNode
  path: String!
  parentNodes: [PageTreeNode!]!
  document: PageContentUnion
}

enum PageTreeNodeVisibility {
  Published
  Unpublished
  Archived
}

union PageContentUnion = Page

type Page implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

interface DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

type Redirect implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  sourceType: RedirectSourceTypeValues!
  source: String!
  target: JSONObject!
  comment: String
  active: Boolean!
  generationType: RedirectGenerationType!
  createdAt: DateTime!
}

enum RedirectSourceTypeValues {
  path
}

enum RedirectGenerationType {
  manual
  automatic
}

type Query {
  builds(limit: Float): [Build!]!
  autoBuildStatus: AutoBuildStatus!
  buildTemplates: [BuildTemplate!]!
  redirects(scope: RedirectScopeInput = {}, query: String, type: RedirectGenerationType, active: Boolean, sortColumnName: String, sortDirection: SortDirection = ASC): [Redirect!]!
  redirect(id: ID!): Redirect!
  redirectSourceAvailable(scope: RedirectScopeInput = {}, source: String!): Boolean!
  damFilesList(offset: Int = 0, limit: Int = 20, sortColumnName: String, sortDirection: SortDirection = ASC, folderId: ID, includeArchived: Boolean = false, filter: FileFilterInput): PaginatedDamFiles!
  damFile(id: ID!): DamFile!
  damIsFilenameOccupied(filename: String!, folderId: String): Boolean!
  damAreFilenamesOccupied(filenames: [FilenameInput!]!): [FilenameResponse!]!
  damFoldersList(offset: Int = 0, limit: Int = 20, sortColumnName: String, sortDirection: SortDirection = ASC, parentId: ID, includeArchived: Boolean, filter: FolderFilterInput): PaginatedDamFolders!
  damFolder(id: ID!): DamFolder!
  damFolderByNameAndParentId(name: String!, parentId: ID): DamFolder
  pageTreeNode(id: ID!): PageTreeNode
  pageTreeNodeByPath(path: String!, scope: PageTreeNodeScopeInput!): PageTreeNode
  pageTreeNodeList(scope: PageTreeNodeScopeInput!, category: String): [PageTreeNode!]!
  pageTreeNodeSlugAvailable(scope: PageTreeNodeScopeInput!, parentId: ID, slug: String!): SlugAvailability!
  damItemsList(offset: Int = 0, limit: Int = 20, sortColumnName: String, sortDirection: SortDirection = ASC, folderId: ID, includeArchived: Boolean, filter: DamItemFilterInput): PaginatedDamItems!
  me: CurrentUser!
}

input RedirectScopeInput {
  thisScopeHasNoFields____: String
}

enum SortDirection {
  ASC
  DESC
}

input FileFilterInput {
  searchText: String
  mimetypes: [String!]
}

input FilenameInput {
  name: String!
  folderId: ID
}

input FolderFilterInput {
  searchText: String
}

input PageTreeNodeScopeInput {
  thisScopeHasNoFields____: String
}

enum SlugAvailability {
  Available
  Taken
  Reserved
}

input DamItemFilterInput {
  searchText: String
  mimetypes: [String!]
}

type Mutation {
  createBuilds(input: CreateBuildsInput!): Boolean!
  createRedirect(scope: RedirectScopeInput = {}, input: RedirectInput!): Redirect!
  updateRedirect(id: ID!, input: RedirectInput!, lastUpdatedAt: DateTime): Redirect!
  updateRedirectActiveness(id: ID!, input: RedirectUpdateActivenessInput!): Redirect!
  deleteRedirect(id: ID!): Boolean!
  updateDamFile(id: ID!, input: UpdateDamFileInput!): DamFile!
  moveDamFiles(fileIds: [ID!]!, targetFolderId: ID): [DamFile!]!
  archiveDamFile(id: ID!): DamFile!
  restoreDamFile(id: ID!): DamFile!
  deleteDamFile(id: ID!): Boolean!
  createDamFolder(input: CreateDamFolderInput!): DamFolder!
  updateDamFolder(id: ID!, input: UpdateDamFolderInput!): DamFolder!
  moveDamFolders(folderIds: [ID!]!, targetFolderId: ID): [DamFolder!]!
  deleteDamFolder(id: ID!): Boolean!
  updatePageTreeNode(id: ID!, input: PageTreeNodeUpdateInput!): PageTreeNode!
  deletePageTreeNode(id: ID!): Boolean!
  updatePageTreeNodeVisibility(id: ID!, input: PageTreeNodeUpdateVisibilityInput!): PageTreeNode!
  movePageTreeNodesByPos(ids: [ID!]!, input: MovePageTreeNodesByPosInput!): [PageTreeNode!]!
  movePageTreeNodesByNeighbour(ids: [ID!]!, input: MovePageTreeNodesByNeighbourInput!): [PageTreeNode!]!
  updatePageTreeNodeCategory(id: ID!, category: String!): PageTreeNode!
  createPageTreeNode(input: PageTreeNodeCreateInput!, scope: PageTreeNodeScopeInput!, category: String!): PageTreeNode!
  signOut: String!
}

input CreateBuildsInput {
  names: [String!]!
}

input RedirectInput {
  sourceType: RedirectSourceTypeValues!
  source: String!
  target: JSONObject!
  comment: String
  active: Boolean
  generationType: RedirectGenerationType!
}

input RedirectUpdateActivenessInput {
  active: Boolean!
}

input UpdateDamFileInput {
  name: String
  title: String
  altText: String
  image: UpdateImageFileInput
  folderId: ID
}

input UpdateImageFileInput {
  cropArea: ImageCropAreaInput
}

input ImageCropAreaInput {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

input CreateDamFolderInput {
  name: String!
  parentId: ID
}

input UpdateDamFolderInput {
  name: String
  parentId: ID
  archived: Boolean
}

input PageTreeNodeUpdateInput {
  name: String!
  slug: String!
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
}

input AttachedDocumentInput {
  type: String!
  id: String
}

input PageTreeNodeUpdateVisibilityInput {
  visibility: PageTreeNodeVisibility!
}

input MovePageTreeNodesByPosInput {
  parentId: String
  pos: Int!
}

input MovePageTreeNodesByNeighbourInput {
  parentId: String
  afterId: String
  beforeId: String
}

input PageTreeNodeCreateInput {
  id: ID
  name: String!
  parentId: String
  pos: Int
  slug: String!
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
}
