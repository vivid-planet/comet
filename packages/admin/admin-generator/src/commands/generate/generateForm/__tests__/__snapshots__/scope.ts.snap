// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form Scope generates prop for scope 1`] = `
"
    import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { gql } from "@apollo/client";
import { CheckboxField } from "@comet/admin";
import { Field } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormInput } from "@comet/admin";
import { FinalFormRangeInput } from "@comet/admin";
import { FinalFormSelect } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { NumberField } from "@comet/admin";
import { RadioGroupField } from "@comet/admin";
import { TextAreaField } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { ArrowLeft } from "@comet/admin-icons";
import { Lock } from "@comet/admin-icons";
import { DateTimeField } from "@comet/admin-date-time";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { BlockState } from "@comet/cms-admin";
import { createFinalFormBlock } from "@comet/cms-admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { FileUploadField } from "@comet/cms-admin";
import { IconButton } from "@mui/material";
import { MenuItem } from "@mui/material";
import { InputAdornment } from "@mui/material";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { GQLProductScope } from "@src/graphql.generated";
import { productFormFragment } from "./ProductForm.gql";
import { GQLProductFormFragment } from "./ProductForm.gql.generated";
import { productQuery } from "./ProductForm.gql";
import { GQLProductQuery } from "./ProductForm.gql.generated";
import { GQLProductQueryVariables } from "./ProductForm.gql.generated";
import { createProductMutation } from "./ProductForm.gql";
import { GQLCreateProductMutation } from "./ProductForm.gql.generated";
import { GQLCreateProductMutationVariables } from "./ProductForm.gql.generated";
import { updateProductMutation } from "./ProductForm.gql";
import { GQLUpdateProductMutation } from "./ProductForm.gql.generated";
import { GQLUpdateProductMutationVariables } from "./ProductForm.gql.generated";
    import isEqual from "lodash.isequal";

    

    

    type FormValues = GQLProductFormFragment ;

    interface FormProps {
            onCreate?: (id: string) => void;
id?: string;
scope: GQLProductScope;
        }

    export function ProductForm({onCreate, id, scope}: FormProps) {
        const client = useApolloClient();
        const mode = id ? "edit" : "add";
        const formApiRef = useFormApiRef<FormValues>();
        const stackSwitchApi = useStackSwitchApi();
        

        
        const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(
            productQuery,
            id ? { variables: { id } } : { skip: true },
        );
        

        const initialValues = useMemo<Partial<FormValues>>(() => data?.product
            ? {
                ...filterByFragment<GQLProductFormFragment>(productFormFragment, data.product),
                
            }
            : {
                
            }
        , [data]);


        
        const saveConflict = useFormSaveConflict({
            checkConflict: async () => {
                const updatedAt = await queryUpdatedAt(client, "product", id);
                return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
            },
            formApiRef,
            loadLatestVersion: async () => {
                await refetch();
            },
        });
        

        const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
            if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
            const output = {
        ...formValues,
        title: formValues.title ?? null,
    };

            if (mode === "edit") {
                
                if (!id) throw new Error();
                const {  ...updateInput } = output;
                await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
                    mutation: updateProductMutation,
                    variables: { id, input: updateInput },
                });
                
            } else {
                
                const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                    mutation: createProductMutation,
                    variables: {
                        
                        input: output, scope },
                });
                const id = mutationResponse?.createProduct.id;
                if (id) {
                    setTimeout(() => {
                        onCreate?.(id);
                        if (!event.navigatingBack) { stackSwitchApi.activatePage(\`edit\`, id);
                    });
                }
                
            }
        };

        

         if (error) throw error;

                    if (loading) {
                        return <Loading behavior="fillPageHeight" />;
                    }

        return (
            <FinalForm<FormValues>
                apiRef={formApiRef}
                onSubmit={handleSubmit}
                mode={mode}
                initialValues={initialValues}
                initialValuesEqual={isEqual} //required to compare block data correctly
                subscription={{  }}
            >
                {() => (
                    <>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField
            
            
            variant="horizontal"
            fullWidth
            name="title"
            label={<FormattedMessage id="product.title" defaultMessage="Title" />}
            
            
            
            
        />
                        </>
                    </>
                )}
            </FinalForm>
        );
    }

    "
`;

exports[`Form Scope uses scope from context by default 1`] = `
"
    import { FormattedMessage } from "react-intl";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { gql } from "@apollo/client";
import { CheckboxField } from "@comet/admin";
import { Field } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { FinalForm } from "@comet/admin";
import { FinalFormInput } from "@comet/admin";
import { FinalFormRangeInput } from "@comet/admin";
import { FinalFormSelect } from "@comet/admin";
import { FinalFormSubmitEvent } from "@comet/admin";
import { Loading } from "@comet/admin";
import { NumberField } from "@comet/admin";
import { RadioGroupField } from "@comet/admin";
import { TextAreaField } from "@comet/admin";
import { TextField } from "@comet/admin";
import { useFormApiRef } from "@comet/admin";
import { useStackSwitchApi } from "@comet/admin";
import { ArrowLeft } from "@comet/admin-icons";
import { Lock } from "@comet/admin-icons";
import { DateTimeField } from "@comet/admin-date-time";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { BlockState } from "@comet/cms-admin";
import { createFinalFormBlock } from "@comet/cms-admin";
import { queryUpdatedAt } from "@comet/cms-admin";
import { resolveHasSaveConflict } from "@comet/cms-admin";
import { useFormSaveConflict } from "@comet/cms-admin";
import { FileUploadField } from "@comet/cms-admin";
import { IconButton } from "@mui/material";
import { MenuItem } from "@mui/material";
import { InputAdornment } from "@mui/material";
import { FormApi } from "final-form";
import { useMemo } from "react";
import { GQLProductScope } from "@src/graphql.generated";
import { useContentScope } from "@comet/cms-admin";
import { productFormFragment } from "./ProductForm.gql";
import { GQLProductFormFragment } from "./ProductForm.gql.generated";
import { productQuery } from "./ProductForm.gql";
import { GQLProductQuery } from "./ProductForm.gql.generated";
import { GQLProductQueryVariables } from "./ProductForm.gql.generated";
import { createProductMutation } from "./ProductForm.gql";
import { GQLCreateProductMutation } from "./ProductForm.gql.generated";
import { GQLCreateProductMutationVariables } from "./ProductForm.gql.generated";
import { updateProductMutation } from "./ProductForm.gql";
import { GQLUpdateProductMutation } from "./ProductForm.gql.generated";
import { GQLUpdateProductMutationVariables } from "./ProductForm.gql.generated";
    import isEqual from "lodash.isequal";

    

    

    type FormValues = GQLProductFormFragment ;

    interface FormProps {
            onCreate?: (id: string) => void;
id?: string;
        }

    export function ProductForm({onCreate, id}: FormProps) {
        const client = useApolloClient();
        const mode = id ? "edit" : "add";
        const formApiRef = useFormApiRef<FormValues>();
        const stackSwitchApi = useStackSwitchApi();
        const { scope } = useContentScope();

        
        const { data, error, loading, refetch } = useQuery<GQLProductQuery, GQLProductQueryVariables>(
            productQuery,
            id ? { variables: { id } } : { skip: true },
        );
        

        const initialValues = useMemo<Partial<FormValues>>(() => data?.product
            ? {
                ...filterByFragment<GQLProductFormFragment>(productFormFragment, data.product),
                
            }
            : {
                
            }
        , [data]);


        
        const saveConflict = useFormSaveConflict({
            checkConflict: async () => {
                const updatedAt = await queryUpdatedAt(client, "product", id);
                return resolveHasSaveConflict(data?.product.updatedAt, updatedAt);
            },
            formApiRef,
            loadLatestVersion: async () => {
                await refetch();
            },
        });
        

        const handleSubmit = async (formValues: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
            if (await saveConflict.checkForConflicts()) throw new Error("Conflicts detected");
            const output = {
        ...formValues,
        title: formValues.title ?? null,
    };

            if (mode === "edit") {
                
                if (!id) throw new Error();
                const {  ...updateInput } = output;
                await client.mutate<GQLUpdateProductMutation, GQLUpdateProductMutationVariables>({
                    mutation: updateProductMutation,
                    variables: { id, input: updateInput },
                });
                
            } else {
                
                const { data: mutationResponse } = await client.mutate<GQLCreateProductMutation, GQLCreateProductMutationVariables>({
                    mutation: createProductMutation,
                    variables: {
                        scope,
                        input: output },
                });
                const id = mutationResponse?.createProduct.id;
                if (id) {
                    setTimeout(() => {
                        onCreate?.(id);
                        if (!event.navigatingBack) { stackSwitchApi.activatePage(\`edit\`, id);
                    });
                }
                
            }
        };

        

         if (error) throw error;

                    if (loading) {
                        return <Loading behavior="fillPageHeight" />;
                    }

        return (
            <FinalForm<FormValues>
                apiRef={formApiRef}
                onSubmit={handleSubmit}
                mode={mode}
                initialValues={initialValues}
                initialValuesEqual={isEqual} //required to compare block data correctly
                subscription={{  }}
            >
                {() => (
                    <>
                        {saveConflict.dialogs}
                        <>
                            
        <TextField
            
            
            variant="horizontal"
            fullWidth
            name="title"
            label={<FormattedMessage id="product.title" defaultMessage="Title" />}
            
            
            
            
        />
                        </>
                    </>
                )}
            </FinalForm>
        );
    }

    "
`;
