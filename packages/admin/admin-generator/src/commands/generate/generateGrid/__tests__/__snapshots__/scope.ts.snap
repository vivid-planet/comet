// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Grid Scope generates prop for scope 1`] = `
"import {
        GQLProductsGridQuery,
        GQLProductsGridQueryVariables,
        GQLProductsFormFragment,
        GQLCreateProductMutation,
        GQLCreateProductMutationVariables,
        GQLUpdateProductPositionMutation,
        GQLUpdateProductPositionMutationVariables,
        GQLDeleteProductMutation,
        GQLDeleteProductMutationVariables
    } from "./ProductsGrid.generated";
    import { FormattedMessage } from "react-intl";
import { FormattedNumber } from "react-intl";
import { useIntl } from "react-intl";
import { ReactNode } from "react";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Button } from "@comet/admin";
import { CrudContextMenu } from "@comet/admin";
import { CrudMoreActionsMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { ExportApi } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridCellContent } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridDateTimeColumn } from "@comet/admin";
import { dataGridDateColumn } from "@comet/admin";
import { dataGridIdColumn } from "@comet/admin";
import { dataGridManyToManyColumn } from "@comet/admin";
import { dataGridOneToManyColumn } from "@comet/admin";
import { renderStaticSelectCell } from "@comet/admin";
import { messages } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { StackLink } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { Tooltip } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridExcelExport } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { BlockPreviewContent } from "@comet/cms-admin";
import { Alert } from "@mui/material";
import { Box } from "@mui/material";
import { IconButton } from "@mui/material";
import { Typography } from "@mui/material";
import { useTheme } from "@mui/material";
import { Menu } from "@mui/material";
import { MenuItem } from "@mui/material";
import { ListItemIcon } from "@mui/material";
import { ListItemText } from "@mui/material";
import { CircularProgress } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridLogicOperator } from "@mui/x-data-grid-pro";
import { GridRenderCellParams } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarProps } from "@mui/x-data-grid-pro";
import { GridColumnHeaderTitle } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { GridRowOrderChangeParams } from "@mui/x-data-grid-pro";
import { ProductScope } from "@src/graphql.generated";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
import { Info as InfoIcon } from "@comet/admin-icons";
import { Excel as ExcelIcon } from "@comet/admin-icons";

    const productsFragment = gql\`
        fragment ProductsForm on Product {
            id
            title
        }
    \`;

    const productsQuery = gql\`
    query ProductsGrid($scope: ProductScope!, $offset: Int!, $limit: Int!) {
        products(scope: $scope, offset: $offset, limit: $limit) {
            nodes { ...ProductsForm } totalCount
        }
    }
    \${productsFragment}
    \`;

    

    


    
    function ProductsGridToolbar() {
        return (
            <DataGridToolbar>
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="product.productsForm.newEntry" defaultMessage={\`New Product\`}  />
    </Button>
            </DataGridToolbar>
        );
    }

    type Props = {
            scope: ProductScope;
        };

    export function ProductsGrid({scope }: Props) {
        
        const intl = useIntl();
        const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ProductsGrid") };
        
        

        

        const columns: GridColDef<GQLProductsFormFragment>[] = [
            {field: "title",
headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Title" }),
filterable: false,
sortable: false,
flex: 1,
minWidth: 150,},
                {field: "actions",
headerName: "",
sortable: false,
filterable: false,
type: "actions",
align: "right",
pinned: "right",
width: 52,
renderCell: (params) => {
                            return (
                                <>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                </>
                            );
                                },}
        ];

        

        const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
            variables: {
                scope, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel, columns)
            },
        });
        const rowCount = useBufferedRowCount(data?.products.totalCount);
        if (error) throw error;
        const rows = data?.products.nodes ?? [];

        

        return (
            <DataGridPro
                {...dataGridProps}
                rows={rows}
                rowCount={rowCount}
                columns={columns}
                loading={loading}
                slots={{
                                toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
                            }}
                            
                
            />
        );
    }
    "
`;

exports[`Grid Scope uses scope from context by default 1`] = `
"import {
        GQLProductsGridQuery,
        GQLProductsGridQueryVariables,
        GQLProductsFormFragment,
        GQLCreateProductMutation,
        GQLCreateProductMutationVariables,
        GQLUpdateProductPositionMutation,
        GQLUpdateProductPositionMutationVariables,
        GQLDeleteProductMutation,
        GQLDeleteProductMutationVariables
    } from "./ProductsGrid.generated";
    import { FormattedMessage } from "react-intl";
import { FormattedNumber } from "react-intl";
import { useIntl } from "react-intl";
import { ReactNode } from "react";
import { gql } from "@apollo/client";
import { useApolloClient } from "@apollo/client";
import { useQuery } from "@apollo/client";
import { Button } from "@comet/admin";
import { CrudContextMenu } from "@comet/admin";
import { CrudMoreActionsMenu } from "@comet/admin";
import { DataGridToolbar } from "@comet/admin";
import { ExportApi } from "@comet/admin";
import { filterByFragment } from "@comet/admin";
import { GridFilterButton } from "@comet/admin";
import { GridCellContent } from "@comet/admin";
import { GridColDef } from "@comet/admin";
import { dataGridDateTimeColumn } from "@comet/admin";
import { dataGridDateColumn } from "@comet/admin";
import { dataGridIdColumn } from "@comet/admin";
import { dataGridManyToManyColumn } from "@comet/admin";
import { dataGridOneToManyColumn } from "@comet/admin";
import { renderStaticSelectCell } from "@comet/admin";
import { messages } from "@comet/admin";
import { muiGridFilterToGql } from "@comet/admin";
import { muiGridSortToGql } from "@comet/admin";
import { StackLink } from "@comet/admin";
import { FillSpace } from "@comet/admin";
import { Tooltip } from "@comet/admin";
import { useBufferedRowCount } from "@comet/admin";
import { useDataGridExcelExport } from "@comet/admin";
import { useDataGridRemote } from "@comet/admin";
import { usePersistentColumnState } from "@comet/admin";
import { BlockPreviewContent } from "@comet/cms-admin";
import { Alert } from "@mui/material";
import { Box } from "@mui/material";
import { IconButton } from "@mui/material";
import { Typography } from "@mui/material";
import { useTheme } from "@mui/material";
import { Menu } from "@mui/material";
import { MenuItem } from "@mui/material";
import { ListItemIcon } from "@mui/material";
import { ListItemText } from "@mui/material";
import { CircularProgress } from "@mui/material";
import { DataGridPro } from "@mui/x-data-grid-pro";
import { GridLogicOperator } from "@mui/x-data-grid-pro";
import { GridRenderCellParams } from "@mui/x-data-grid-pro";
import { GridSlotsComponent } from "@mui/x-data-grid-pro";
import { GridToolbarProps } from "@mui/x-data-grid-pro";
import { GridColumnHeaderTitle } from "@mui/x-data-grid-pro";
import { GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import { GridRowOrderChangeParams } from "@mui/x-data-grid-pro";
import { ProductScope } from "@src/graphql.generated";
import { useContentScope } from "@comet/cms-admin";
import { Add as AddIcon } from "@comet/admin-icons";
import { Edit as EditIcon } from "@comet/admin-icons";
import { Info as InfoIcon } from "@comet/admin-icons";
import { Excel as ExcelIcon } from "@comet/admin-icons";

    const productsFragment = gql\`
        fragment ProductsForm on Product {
            id
            title
        }
    \`;

    const productsQuery = gql\`
    query ProductsGrid($offset: Int!, $limit: Int!, $scope: ProductContentScopeInput!) {
        products(offset: $offset, limit: $limit, scope: $scope) {
            nodes { ...ProductsForm } totalCount
        }
    }
    \${productsFragment}
    \`;

    

    


    
    function ProductsGridToolbar() {
        return (
            <DataGridToolbar>
                <FillSpace />
        <Button responsive startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add">
        <FormattedMessage id="product.productsForm.newEntry" defaultMessage={\`New Product\`}  />
    </Button>
            </DataGridToolbar>
        );
    }

    

    export function ProductsGrid() {
        
        const intl = useIntl();
        const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("ProductsGrid") };
        const { scope } = useContentScope();
        

        

        const columns: GridColDef<GQLProductsFormFragment>[] = [
            {field: "title",
headerName: intl.formatMessage({ id: "product.title", defaultMessage: "Title" }),
filterable: false,
sortable: false,
flex: 1,
minWidth: 150,},
                {field: "actions",
headerName: "",
sortable: false,
filterable: false,
type: "actions",
align: "right",
pinned: "right",
width: 52,
renderCell: (params) => {
                            return (
                                <>
                                
                                        <IconButton color="primary" component={StackLink} pageName="edit" payload={params.row.id}>
                                            <EditIcon />
                                        </IconButton>
                                </>
                            );
                                },}
        ];

        

        const { data, loading, error } = useQuery<GQLProductsGridQuery, GQLProductsGridQueryVariables>(productsQuery, {
            variables: {
                scope, offset: dataGridProps.paginationModel.page * dataGridProps.paginationModel.pageSize, limit: dataGridProps.paginationModel.pageSize, sort: muiGridSortToGql(dataGridProps.sortModel, columns)
            },
        });
        const rowCount = useBufferedRowCount(data?.products.totalCount);
        if (error) throw error;
        const rows = data?.products.nodes ?? [];

        

        return (
            <DataGridPro
                {...dataGridProps}
                rows={rows}
                rowCount={rowCount}
                columns={columns}
                loading={loading}
                slots={{
                                toolbar: ProductsGridToolbar as GridSlotsComponent["toolbar"],
                            }}
                            
                
            />
        );
    }
    "
`;
